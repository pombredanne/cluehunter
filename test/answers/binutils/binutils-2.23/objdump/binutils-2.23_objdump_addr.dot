digraph tiantgraph{
"12800#284	  return bfd_fopen (filename, target, FOPEN_RB, -1);";
"12929#259	  return nbfd;";
"12802#203	  nbfd = _bfd_new_bfd ();";
"12804#63	  nbfd = (bfd *) bfd_zmalloc (sizeof (bfd));";
"12805#bfd_zmalloc (size=176) at libbfd.c:319"[shape="record"];
"12935#3407	  display_any_bfd (file, 0);";
"12936#display_any_bfd (file=0x81aea08, level=0) at ./objdump.c:3349"[shape="record"];
"12809#326		memset (ptr, 0, (size_t) size);";
"12810#329	  return ptr;";
"12939#3353	  if (bfd_check_format (file, bfd_archive))";
"12940#bfd_check_format (abfd=0x81aea08, format=bfd_archive) at format.c:95"[shape="record"];
"13197#562	  ared->parsed_size = parsed_size;";
"12942#bfd_check_format_matches (abfd=0x81aea08, format=bfd_archive, matching=0x0) at format.c:123"[shape="record"];
"12816#75	  nbfd->memory = objalloc_create ();";
"13329#922	  for (counter = 0, set = ardata->symdefs;counter<ardata->symdef_count;counter++,set++,rbase+=BSD_SYMDEF_SIZE)";
"12818#91	  ret = (struct objalloc *) malloc (sizeof *ret);";
"13205#577	  return ared;";
"13211#886	  parsed_size = mapdata->parsed_size;";
"13340#927	      set->file_offset = H_GET_32 (abfd, rbase + BSD_SYMDEF_OFFSET_SIZE);";
"13341#bfd_getl32 (p=0x81da000) at libbfd.c:619"[shape="record"];
"13342#619	  const bfd_byte *addr = (const bfd_byte *) p;";
"13343#622	  v = (unsigned long) addr[0];";
"12941#95	  return bfd_check_format_matches (abfd, format, NULL);";
"12827#109	  return ret;";
"13236#889	  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);";
"13237#bfd_zalloc (abfd=0x81aea08, size=0) at opncls.c:995"[shape="record"];
"13238#995	  res = bfd_alloc (abfd, size);";
"13239#bfd_alloc (abfd=0x81aea08, size=0) at opncls.c:933"[shape="record"];
"13240#933	  ret = objalloc_alloc ((struct objalloc *) abfd->memory, (unsigned long) size);";
"13114#883	  mapdata = (struct areltdata *) _bfd_read_ar_hdr (abfd);";
"13115#_bfd_generic_read_ar_hdr (abfd=0x81aea08) at archive.c:442"[shape="record"];
"13116#442	  return _bfd_generic_read_ar_hdr_mag (abfd, NULL);";
"13117#_bfd_generic_read_ar_hdr_mag (abfd=0x81aea08, mag=0x0) at archive.c:450"[shape="record"];
"13247#998	  return res;";
"12993#215	      temp = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));";
"12994#bfd_generic_archive_p (abfd=0x81aea08) at archive.c:771"[shape="record"];
"13126#464	  if (bfd_bread (hdrp, sizeof (struct ar_hdr), abfd) != sizeof (struct ar_hdr))";
"13127#bfd_bread (ptr=0xbfffe500, size=60, abfd=0x81aea08) at bfdio.c:185"[shape="record"];
"13130#198	    nread = abfd->iovec->bread (abfd, ptr, size);";
"13131#cache_bread (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:311"[shape="record"];
"13132#311	  file_ptr nread = 0;";
"13135#319	      file_ptr chunk_size = nbytes - nread;";
"13112#do_slurp_bsd_armap (abfd=0x81aea08) at archive.c:878"[shape="record"];
"13138#cache_bread_1 (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:271"[shape="record"];
"13267#902	  ardata->symdef_count = H_GET_32 (abfd, raw_armap) / BSD_SYMDEF_SIZE;";
"13140#274	  f = bfd_cache_lookup (abfd, CACHE_NORMAL);";
"13142#291	  nread = fread (buf, 1, nbytes, f);";
"12879#107	  return nbfd;";
"13242#936	  return ret;";
"13280#913	  rbase = raw_armap + BSD_SYMDEF_COUNT_SIZE;";
"13111#1088	    return do_slurp_bsd_armap (abfd);";
"13137#325	      chunk_nread = cache_bread_1 (abfd, (char *) buf + nread, chunk_size);";
"13164#481	  scan = sscanf (hdr.ar_size, \\"%\\" BFD_VMA_FMT \\"u\\", &parsed_size);";
"13050#809	  if (!BFD_SEND (abfd, _bfd_slurp_armap, (abfd))";
"13051#bfd_slurp_armap (abfd=0x81aea08) at archive.c:1074"[shape="record"];
"12798#3400	  file = bfd_openr (filename, target);";
edge [fontname = "Verdana", fontsize = 10, color="crimson", style="solid"];
"12802#203	  nbfd = _bfd_new_bfd ();"->"12929#259	  return nbfd;"[label="nbfd->memory|nbfd"];
"12802#203	  nbfd = _bfd_new_bfd ();"->"12929#259	  return nbfd;"[label="nbfd"];
"12798#3400	  file = bfd_openr (filename, target);"->"12935#3407	  display_any_bfd (file, 0);"[label="file->memory|file"];
"12798#3400	  file = bfd_openr (filename, target);"->"12935#3407	  display_any_bfd (file, 0);"[label="file"];
"12805#bfd_zmalloc (size=176) at libbfd.c:319"->"12809#326		memset (ptr, 0, (size_t) size);"[label="size"];
"12809#326		memset (ptr, 0, (size_t) size);"->"12810#329	  return ptr;"[label="*(ptr)|*ptr|ptr"];
"12936#display_any_bfd (file=0x81aea08, level=0) at ./objdump.c:3349"->"12939#3353	  if (bfd_check_format (file, bfd_archive))"[label="file->memory|file"];
"12936#display_any_bfd (file=0x81aea08, level=0) at ./objdump.c:3349"->"12939#3353	  if (bfd_check_format (file, bfd_archive))"[label="file"];
"13164#481	  scan = sscanf (hdr.ar_size, \\"%\\" BFD_VMA_FMT \\"u\\", &parsed_size);"->"13197#562	  ared->parsed_size = parsed_size;"[label="parsed_size"];
"13267#902	  ardata->symdef_count = H_GET_32 (abfd, raw_armap) / BSD_SYMDEF_SIZE;"->"13329#922	  for (counter = 0, set = ardata->symdefs;counter<ardata->symdef_count;counter++,set++,rbase+=BSD_SYMDEF_SIZE)"[label="ardata->symdef_count|ardata"];
"13280#913	  rbase = raw_armap + BSD_SYMDEF_COUNT_SIZE;"->"13329#922	  for (counter = 0, set = ardata->symdefs;counter<ardata->symdef_count;counter++,set++,rbase+=BSD_SYMDEF_SIZE)"[label="rbase"];
"13197#562	  ared->parsed_size = parsed_size;"->"13205#577	  return ared;"[label="ared->parsed_size|ared"];
"13114#883	  mapdata = (struct areltdata *) _bfd_read_ar_hdr (abfd);"->"13211#886	  parsed_size = mapdata->parsed_size;"[label="mapdata->parsed_size|mapdata"];
"13329#922	  for (counter = 0, set = ardata->symdefs;counter<ardata->symdef_count;counter++,set++,rbase+=BSD_SYMDEF_SIZE)"->"13340#927	      set->file_offset = H_GET_32 (abfd, rbase + BSD_SYMDEF_OFFSET_SIZE);"[label="rbase"];
"13341#bfd_getl32 (p=0x81da000) at libbfd.c:619"->"13342#619	  const bfd_byte *addr = (const bfd_byte *) p;"[label="p"];
"13342#619	  const bfd_byte *addr = (const bfd_byte *) p;"->"13343#622	  v = (unsigned long) addr[0];"[label="*(addr)|*addr|addr"];
"12940#bfd_check_format (abfd=0x81aea08, format=bfd_archive) at format.c:95"->"12941#95	  return bfd_check_format_matches (abfd, format, NULL);"[label="abfd"];
"12940#bfd_check_format (abfd=0x81aea08, format=bfd_archive) at format.c:95"->"12941#95	  return bfd_check_format_matches (abfd, format, NULL);"[label="abfd->memory|abfd"];
"12818#91	  ret = (struct objalloc *) malloc (sizeof *ret);"->"12827#109	  return ret;"[label="ret"];
"13211#886	  parsed_size = mapdata->parsed_size;"->"13236#889	  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);"[label="parsed_size"];
"13112#do_slurp_bsd_armap (abfd=0x81aea08) at archive.c:878"->"13236#889	  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);"[label="abfd->memory|abfd"];
"13237#bfd_zalloc (abfd=0x81aea08, size=0) at opncls.c:995"->"13238#995	  res = bfd_alloc (abfd, size);"[label="size"];
"13237#bfd_zalloc (abfd=0x81aea08, size=0) at opncls.c:995"->"13238#995	  res = bfd_alloc (abfd, size);"[label="abfd->memory|abfd"];
"13051#bfd_slurp_armap (abfd=0x81aea08) at archive.c:1074"->"13111#1088	    return do_slurp_bsd_armap (abfd);"[label="abfd"];
"13051#bfd_slurp_armap (abfd=0x81aea08) at archive.c:1074"->"13111#1088	    return do_slurp_bsd_armap (abfd);"[label="abfd->memory|abfd"];
"13239#bfd_alloc (abfd=0x81aea08, size=0) at opncls.c:933"->"13240#933	  ret = objalloc_alloc ((struct objalloc *) abfd->memory, (unsigned long) size);"[label="abfd->memory|abfd"];
"13239#bfd_alloc (abfd=0x81aea08, size=0) at opncls.c:933"->"13240#933	  ret = objalloc_alloc ((struct objalloc *) abfd->memory, (unsigned long) size);"[label="size"];
"13240#933	  ret = objalloc_alloc ((struct objalloc *) abfd->memory, (unsigned long) size);"->"13242#936	  return ret;"[label="ret"];
"13115#_bfd_generic_read_ar_hdr (abfd=0x81aea08) at archive.c:442"->"13116#442	  return _bfd_generic_read_ar_hdr_mag (abfd, NULL);"[label="abfd"];
"13238#995	  res = bfd_alloc (abfd, size);"->"13247#998	  return res;"[label="res"];
"12942#bfd_check_format_matches (abfd=0x81aea08, format=bfd_archive, matching=0x0) at format.c:123"->"12993#215	      temp = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));"[label="abfd->memory|abfd"];
"12942#bfd_check_format_matches (abfd=0x81aea08, format=bfd_archive, matching=0x0) at format.c:123"->"12993#215	      temp = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));"[label="abfd"];
"13117#_bfd_generic_read_ar_hdr_mag (abfd=0x81aea08, mag=0x0) at archive.c:450"->"13126#464	  if (bfd_bread (hdrp, sizeof (struct ar_hdr), abfd) != sizeof (struct ar_hdr))"[label="abfd"];
"13127#bfd_bread (ptr=0xbfffe500, size=60, abfd=0x81aea08) at bfdio.c:185"->"13130#198	    nread = abfd->iovec->bread (abfd, ptr, size);"[label="abfd"];
"13127#bfd_bread (ptr=0xbfffe500, size=60, abfd=0x81aea08) at bfdio.c:185"->"13130#198	    nread = abfd->iovec->bread (abfd, ptr, size);"[label="size"];
"13132#311	  file_ptr nread = 0;"->"13135#319	      file_ptr chunk_size = nbytes - nread;"[label="nread"];
"13131#cache_bread (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:311"->"13135#319	      file_ptr chunk_size = nbytes - nread;"[label="nbytes"];
"13131#cache_bread (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:311"->"13137#325	      chunk_nread = cache_bread_1 (abfd, (char *) buf + nread, chunk_size);"[label="abfd"];
"13135#319	      file_ptr chunk_size = nbytes - nread;"->"13137#325	      chunk_nread = cache_bread_1 (abfd, (char *) buf + nread, chunk_size);"[label="chunk_size"];
"13236#889	  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);"->"13267#902	  ardata->symdef_count = H_GET_32 (abfd, raw_armap) / BSD_SYMDEF_SIZE;"[label="raw_armap"];
"13112#do_slurp_bsd_armap (abfd=0x81aea08) at archive.c:878"->"13267#902	  ardata->symdef_count = H_GET_32 (abfd, raw_armap) / BSD_SYMDEF_SIZE;"[label="abfd"];
"13138#cache_bread_1 (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:271"->"13140#274	  f = bfd_cache_lookup (abfd, CACHE_NORMAL);"[label="abfd"];
"13138#cache_bread_1 (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:271"->"13142#291	  nread = fread (buf, 1, nbytes, f);"[label="nbytes"];
"13140#274	  f = bfd_cache_lookup (abfd, CACHE_NORMAL);"->"13142#291	  nread = fread (buf, 1, nbytes, f);"[label="f"];
"12816#75	  nbfd->memory = objalloc_create ();"->"12879#107	  return nbfd;"[label="nbfd->memory|nbfd"];
"12804#63	  nbfd = (bfd *) bfd_zmalloc (sizeof (bfd));"->"12879#107	  return nbfd;"[label="nbfd"];
"13112#do_slurp_bsd_armap (abfd=0x81aea08) at archive.c:878"->"13114#883	  mapdata = (struct areltdata *) _bfd_read_ar_hdr (abfd);"[label="abfd"];
"13236#889	  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);"->"13280#913	  rbase = raw_armap + BSD_SYMDEF_COUNT_SIZE;"[label="raw_armap"];
"12994#bfd_generic_archive_p (abfd=0x81aea08) at archive.c:771"->"13050#809	  if (!BFD_SEND (abfd, _bfd_slurp_armap, (abfd))"[label="abfd"];
"12994#bfd_generic_archive_p (abfd=0x81aea08) at archive.c:771"->"13050#809	  if (!BFD_SEND (abfd, _bfd_slurp_armap, (abfd))"[label="abfd->memory|abfd"];
"13142#291	  nread = fread (buf, 1, nbytes, f);"->"13164#481	  scan = sscanf (hdr.ar_size, \\"%\\" BFD_VMA_FMT \\"u\\", &parsed_size);"[label="*(buf)|*buf",style="bold", color="yellow"];
"13247#998	  return res;"->"13280#913	  rbase = raw_armap + BSD_SYMDEF_COUNT_SIZE;"[label="return dependency:raw_armap",style="dashed", color="orange"];
"12879#107	  return nbfd;"->"12929#259	  return nbfd;"[label="return dependency:nbfd",style="dashed", color="orange"];
"12879#107	  return nbfd;"->"12929#259	  return nbfd;"[label="return dependency:nbfd->memory|nbfd",style="dashed", color="orange"];
"12929#259	  return nbfd;"->"12935#3407	  display_any_bfd (file, 0);"[label="return dependency:file",style="dashed", color="orange"];
"12929#259	  return nbfd;"->"12935#3407	  display_any_bfd (file, 0);"[label="return dependency:file->memory|file",style="dashed", color="orange"];
"12800#284	  return bfd_fopen (filename, target, FOPEN_RB, -1);"->"12935#3407	  display_any_bfd (file, 0);"[label="return dependency:file->memory|file",style="dashed", color="orange"];
"12800#284	  return bfd_fopen (filename, target, FOPEN_RB, -1);"->"12935#3407	  display_any_bfd (file, 0);"[label="return dependency:file",style="dashed", color="orange"];
"12827#109	  return ret;"->"12879#107	  return nbfd;"[label="return dependency:nbfd->memory|nbfd",style="dashed", color="orange"];
"12810#329	  return ptr;"->"12879#107	  return nbfd;"[label="return dependency:nbfd",style="dashed", color="orange"];
"13247#998	  return res;"->"13267#902	  ardata->symdef_count = H_GET_32 (abfd, raw_armap) / BSD_SYMDEF_SIZE;"[label="return dependency:raw_armap",style="dashed", color="orange"];
"13116#442	  return _bfd_generic_read_ar_hdr_mag (abfd, NULL);"->"13211#886	  parsed_size = mapdata->parsed_size;"[label="return dependency:mapdata->parsed_size|mapdata",style="dashed", color="orange"];
"13205#577	  return ared;"->"13211#886	  parsed_size = mapdata->parsed_size;"[label="return dependency:mapdata->parsed_size|mapdata",style="dashed", color="orange"];
"13242#936	  return ret;"->"13247#998	  return res;"[label="return dependency:res",style="dashed", color="orange"];
"12929#259	  return nbfd;"->"12800#284	  return bfd_fopen (filename, target, FOPEN_RB, -1);"[label="ref:file->memory|file",style="dashed", color="blue"];
"12929#259	  return nbfd;"->"12800#284	  return bfd_fopen (filename, target, FOPEN_RB, -1);"[label="ref:file",style="dashed", color="blue"];
"12879#107	  return nbfd;"->"12802#203	  nbfd = _bfd_new_bfd ();"[label="ref:nbfd->memory|nbfd",style="dashed", color="blue"];
"12879#107	  return nbfd;"->"12802#203	  nbfd = _bfd_new_bfd ();"[label="ref:nbfd",style="dashed", color="blue"];
"12810#329	  return ptr;"->"12804#63	  nbfd = (bfd *) bfd_zmalloc (sizeof (bfd));"[label="ref:nbfd",style="dashed", color="blue"];
"12827#109	  return ret;"->"12816#75	  nbfd->memory = objalloc_create ();"[label="ref:nbfd->memory|nbfd",style="dashed", color="blue"];
"13247#998	  return res;"->"13236#889	  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);"[label="ref:raw_armap",style="dashed", color="blue"];
"13242#936	  return ret;"->"13238#995	  res = bfd_alloc (abfd, size);"[label="ref:res",style="dashed", color="blue"];
"13116#442	  return _bfd_generic_read_ar_hdr_mag (abfd, NULL);"->"13114#883	  mapdata = (struct areltdata *) _bfd_read_ar_hdr (abfd);"[label="ref:mapdata->parsed_size|mapdata",style="dashed", color="blue"];
"13205#577	  return ared;"->"13116#442	  return _bfd_generic_read_ar_hdr_mag (abfd, NULL);"[label="ref:mapdata->parsed_size|mapdata",style="dashed", color="blue"];
"12800#284	  return bfd_fopen (filename, target, FOPEN_RB, -1);"->"12798#3400	  file = bfd_openr (filename, target);"[label="ref:file",style="dashed", color="blue"];
"12800#284	  return bfd_fopen (filename, target, FOPEN_RB, -1);"->"12798#3400	  file = bfd_openr (filename, target);"[label="ref:file->memory|file",style="dashed", color="blue"];
"12993#215	      temp = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));"->"12994#bfd_generic_archive_p (abfd=0x81aea08) at archive.c:771"[label="abfd,0",style="dotted", color="forestgreen"];
"13050#809	  if (!BFD_SEND (abfd, _bfd_slurp_armap, (abfd))"->"13051#bfd_slurp_armap (abfd=0x81aea08) at archive.c:1074"[label="abfd,0",style="dotted", color="forestgreen"];
"12804#63	  nbfd = (bfd *) bfd_zmalloc (sizeof (bfd));"->"12805#bfd_zmalloc (size=176) at libbfd.c:319"[label="sizeof (bfd),0",style="dotted", color="forestgreen"];
"13126#464	  if (bfd_bread (hdrp, sizeof (struct ar_hdr), abfd) != sizeof (struct ar_hdr))"->"13127#bfd_bread (ptr=0xbfffe500, size=60, abfd=0x81aea08) at bfdio.c:185"[label="sizeof (struct ar_hdr),1",style="dotted", color="forestgreen"];
"13126#464	  if (bfd_bread (hdrp, sizeof (struct ar_hdr), abfd) != sizeof (struct ar_hdr))"->"13127#bfd_bread (ptr=0xbfffe500, size=60, abfd=0x81aea08) at bfdio.c:185"[label="abfd,2",style="dotted", color="forestgreen"];
"12935#3407	  display_any_bfd (file, 0);"->"12936#display_any_bfd (file=0x81aea08, level=0) at ./objdump.c:3349"[label="file,0",style="dotted", color="forestgreen"];
"13130#198	    nread = abfd->iovec->bread (abfd, ptr, size);"->"13131#cache_bread (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:311"[label="size,2",style="dotted", color="forestgreen"];
"13130#198	    nread = abfd->iovec->bread (abfd, ptr, size);"->"13131#cache_bread (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:311"[label="abfd,0",style="dotted", color="forestgreen"];
"12939#3353	  if (bfd_check_format (file, bfd_archive))"->"12940#bfd_check_format (abfd=0x81aea08, format=bfd_archive) at format.c:95"[label="file,0",style="dotted", color="forestgreen"];
"12941#95	  return bfd_check_format_matches (abfd, format, NULL);"->"12942#bfd_check_format_matches (abfd=0x81aea08, format=bfd_archive, matching=0x0) at format.c:123"[label="abfd,0",style="dotted", color="forestgreen"];
"13116#442	  return _bfd_generic_read_ar_hdr_mag (abfd, NULL);"->"13117#_bfd_generic_read_ar_hdr_mag (abfd=0x81aea08, mag=0x0) at archive.c:450"[label="abfd,0",style="dotted", color="forestgreen"];
"13137#325	      chunk_nread = cache_bread_1 (abfd, (char *) buf + nread, chunk_size);"->"13138#cache_bread_1 (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:271"[label="chunk_size,2",style="dotted", color="forestgreen"];
"13137#325	      chunk_nread = cache_bread_1 (abfd, (char *) buf + nread, chunk_size);"->"13138#cache_bread_1 (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:271"[label="abfd,0",style="dotted", color="forestgreen"];
"13236#889	  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);"->"13237#bfd_zalloc (abfd=0x81aea08, size=0) at opncls.c:995"[label="abfd,0",style="dotted", color="forestgreen"];
"13236#889	  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);"->"13237#bfd_zalloc (abfd=0x81aea08, size=0) at opncls.c:995"[label="parsed_size,1",style="dotted", color="forestgreen"];
"13238#995	  res = bfd_alloc (abfd, size);"->"13239#bfd_alloc (abfd=0x81aea08, size=0) at opncls.c:933"[label="size,1",style="dotted", color="forestgreen"];
"13238#995	  res = bfd_alloc (abfd, size);"->"13239#bfd_alloc (abfd=0x81aea08, size=0) at opncls.c:933"[label="abfd,0",style="dotted", color="forestgreen"];
"13111#1088	    return do_slurp_bsd_armap (abfd);"->"13112#do_slurp_bsd_armap (abfd=0x81aea08) at archive.c:878"[label="abfd,0",style="dotted", color="forestgreen"];
"13114#883	  mapdata = (struct areltdata *) _bfd_read_ar_hdr (abfd);"->"13115#_bfd_generic_read_ar_hdr (abfd=0x81aea08) at archive.c:442"[label="abfd,0",style="dotted", color="forestgreen"];
"13340#927	      set->file_offset = H_GET_32 (abfd, rbase + BSD_SYMDEF_OFFSET_SIZE);"->"13341#bfd_getl32 (p=0x81da000) at libbfd.c:619"[label="rbase + 4,0",style="dotted", color="forestgreen"];
}