digraph tiantgraph{
rankdir="BT";
"323#1088	    return do_slurp_bsd_armap (abfd);";
"153#95	  return bfd_check_format_matches (abfd, format, NULL);";
"452#933	  ret = objalloc_alloc ((struct objalloc *) abfd->memory, (unsigned long) size);";
"448#889	  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);";
"449#bfd_zalloc (abfd=0x81aea08, size=0) at opncls.c:995"[shape="record"];
"450#995	  res = bfd_alloc (abfd, size);";
"451#bfd_alloc (abfd=0x81aea08, size=0) at opncls.c:933"[shape="record"];
"324#do_slurp_bsd_armap (abfd=0x81aea08) at archive.c:878"[shape="record"];
"326#883	  mapdata = (struct areltdata *) _bfd_read_ar_hdr (abfd);";
"327#_bfd_generic_read_ar_hdr (abfd=0x81aea08) at archive.c:442"[shape="record"];
"328#442	  return _bfd_generic_read_ar_hdr_mag (abfd, NULL);";
"454#936	  return ret;";
"459#998	  return res;";
"205#215	      temp = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));";
"206#bfd_generic_archive_p (abfd=0x81aea08) at archive.c:771"[shape="record"];
"20#326		memset (ptr, 0, (size_t) size);";
"338#464	  if (bfd_bread (hdrp, sizeof (struct ar_hdr), abfd) != sizeof (struct ar_hdr))";
"339#bfd_bread (ptr=0xbfffe500, size=60, abfd=0x81aea08) at bfdio.c:185"[shape="record"];
"342#198	    nread = abfd->iovec->bread (abfd, ptr, size);";
"343#cache_bread (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:311"[shape="record"];
"344#311	  file_ptr nread = 0;";
"90#107	  return nbfd;";
"347#319	      file_ptr chunk_size = nbytes - nread;";
"349#325	      chunk_nread = cache_bread_1 (abfd, (char *) buf + nread, chunk_size);";
"350#cache_bread_1 (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:271"[shape="record"];
"29#91	  ret = (struct objalloc *) malloc (sizeof *ret);";
"352#274	  f = bfd_cache_lookup (abfd, CACHE_NORMAL);";
"354#291	  nread = fread (buf, 1, nbytes, f);";
"492#913	  rbase = raw_armap + BSD_SYMDEF_COUNT_SIZE;";
"13#203	  nbfd = _bfd_new_bfd ();";
"554#619	  const bfd_byte *addr = (const bfd_byte *) p;";
"376#481	  scan = sscanf (hdr.ar_size, \\"%\\" BFD_VMA_FMT \\"u\\", &parsed_size);";
"16#bfd_zmalloc (size=176) at libbfd.c:319"[shape="record"];
"262#809	  if (!BFD_SEND (abfd, _bfd_slurp_armap, (abfd))";
"263#bfd_slurp_armap (abfd=0x81aea08) at archive.c:1074"[shape="record"];
"9#3400	  file = bfd_openr (filename, target);";
"11#284	  return bfd_fopen (filename, target, FOPEN_RB, -1);";
"141#259	  return nbfd;";
"15#63	  nbfd = (bfd *) bfd_zmalloc (sizeof (bfd));";
"329#_bfd_generic_read_ar_hdr_mag (abfd=0x81aea08, mag=0x0) at archive.c:450"[shape="record"];
"147#3407	  display_any_bfd (file, 0);";
"148#display_any_bfd (file=0x81aea08, level=0) at ./objdump.c:3349"[shape="record"];
"21#329	  return ptr;";
"151#3353	  if (bfd_check_format (file, bfd_archive))";
"152#bfd_check_format (abfd=0x81aea08, format=bfd_archive) at format.c:95"[shape="record"];
"409#562	  ared->parsed_size = parsed_size;";
"154#bfd_check_format_matches (abfd=0x81aea08, format=bfd_archive, matching=0x0) at format.c:123"[shape="record"];
"27#75	  nbfd->memory = objalloc_create ();";
"541#922	  for (counter = 0, set = ardata->symdefs;counter<ardata->symdef_count;counter++,set++,rbase+=BSD_SYMDEF_SIZE)";
"417#577	  return ared;";
"38#109	  return ret;";
"423#886	  parsed_size = mapdata->parsed_size;";
"552#927	      set->file_offset = H_GET_32 (abfd, rbase + BSD_SYMDEF_OFFSET_SIZE);";
"553#bfd_getl32 (p=0x81da000) at libbfd.c:619"[shape="record"];
"555#622	  v = (unsigned long) addr[0];";
edge [fontname = "Verdana", fontsize = 10, color="crimson", style="solid"];
"153#95	  return bfd_check_format_matches (abfd, format, NULL);"->"152#bfd_check_format (abfd=0x81aea08, format=bfd_archive) at format.c:95"[label="abfd"];
"153#95	  return bfd_check_format_matches (abfd, format, NULL);"->"152#bfd_check_format (abfd=0x81aea08, format=bfd_archive) at format.c:95"[label="abfd->memory|abfd"];
"448#889	  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);"->"423#886	  parsed_size = mapdata->parsed_size;"[label="parsed_size"];
"448#889	  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);"->"324#do_slurp_bsd_armap (abfd=0x81aea08) at archive.c:878"[label="abfd->memory|abfd"];
"450#995	  res = bfd_alloc (abfd, size);"->"449#bfd_zalloc (abfd=0x81aea08, size=0) at opncls.c:995"[label="size"];
"450#995	  res = bfd_alloc (abfd, size);"->"449#bfd_zalloc (abfd=0x81aea08, size=0) at opncls.c:995"[label="abfd->memory|abfd"];
"323#1088	    return do_slurp_bsd_armap (abfd);"->"263#bfd_slurp_armap (abfd=0x81aea08) at archive.c:1074"[label="abfd"];
"323#1088	    return do_slurp_bsd_armap (abfd);"->"263#bfd_slurp_armap (abfd=0x81aea08) at archive.c:1074"[label="abfd->memory|abfd"];
"452#933	  ret = objalloc_alloc ((struct objalloc *) abfd->memory, (unsigned long) size);"->"451#bfd_alloc (abfd=0x81aea08, size=0) at opncls.c:933"[label="size"];
"452#933	  ret = objalloc_alloc ((struct objalloc *) abfd->memory, (unsigned long) size);"->"451#bfd_alloc (abfd=0x81aea08, size=0) at opncls.c:933"[label="abfd->memory|abfd"];
"454#936	  return ret;"->"452#933	  ret = objalloc_alloc ((struct objalloc *) abfd->memory, (unsigned long) size);"[label="ret"];
"328#442	  return _bfd_generic_read_ar_hdr_mag (abfd, NULL);"->"327#_bfd_generic_read_ar_hdr (abfd=0x81aea08) at archive.c:442"[label="abfd"];
"326#883	  mapdata = (struct areltdata *) _bfd_read_ar_hdr (abfd);"->"324#do_slurp_bsd_armap (abfd=0x81aea08) at archive.c:878"[label="abfd"];
"459#998	  return res;"->"450#995	  res = bfd_alloc (abfd, size);"[label="res"];
"205#215	      temp = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));"->"154#bfd_check_format_matches (abfd=0x81aea08, format=bfd_archive, matching=0x0) at format.c:123"[label="abfd"];
"205#215	      temp = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));"->"154#bfd_check_format_matches (abfd=0x81aea08, format=bfd_archive, matching=0x0) at format.c:123"[label="abfd->memory|abfd"];
"338#464	  if (bfd_bread (hdrp, sizeof (struct ar_hdr), abfd) != sizeof (struct ar_hdr))"->"329#_bfd_generic_read_ar_hdr_mag (abfd=0x81aea08, mag=0x0) at archive.c:450"[label="abfd"];
"342#198	    nread = abfd->iovec->bread (abfd, ptr, size);"->"339#bfd_bread (ptr=0xbfffe500, size=60, abfd=0x81aea08) at bfdio.c:185"[label="abfd"];
"342#198	    nread = abfd->iovec->bread (abfd, ptr, size);"->"339#bfd_bread (ptr=0xbfffe500, size=60, abfd=0x81aea08) at bfdio.c:185"[label="size"];
"90#107	  return nbfd;"->"15#63	  nbfd = (bfd *) bfd_zmalloc (sizeof (bfd));"[label="nbfd"];
"90#107	  return nbfd;"->"27#75	  nbfd->memory = objalloc_create ();"[label="nbfd->memory|nbfd"];
"347#319	      file_ptr chunk_size = nbytes - nread;"->"344#311	  file_ptr nread = 0;"[label="nread"];
"347#319	      file_ptr chunk_size = nbytes - nread;"->"343#cache_bread (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:311"[label="nbytes"];
"349#325	      chunk_nread = cache_bread_1 (abfd, (char *) buf + nread, chunk_size);"->"343#cache_bread (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:311"[label="abfd"];
"349#325	      chunk_nread = cache_bread_1 (abfd, (char *) buf + nread, chunk_size);"->"347#319	      file_ptr chunk_size = nbytes - nread;"[label="chunk_size"];
"352#274	  f = bfd_cache_lookup (abfd, CACHE_NORMAL);"->"350#cache_bread_1 (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:271"[label="abfd"];
"354#291	  nread = fread (buf, 1, nbytes, f);"->"350#cache_bread_1 (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:271"[label="nbytes"];
"354#291	  nread = fread (buf, 1, nbytes, f);"->"352#274	  f = bfd_cache_lookup (abfd, CACHE_NORMAL);"[label="f"];
"492#913	  rbase = raw_armap + BSD_SYMDEF_COUNT_SIZE;"->"448#889	  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);"[label="raw_armap"];
"554#619	  const bfd_byte *addr = (const bfd_byte *) p;"->"553#bfd_getl32 (p=0x81da000) at libbfd.c:619"[label="p"];
"262#809	  if (!BFD_SEND (abfd, _bfd_slurp_armap, (abfd))"->"206#bfd_generic_archive_p (abfd=0x81aea08) at archive.c:771"[label="abfd"];
"262#809	  if (!BFD_SEND (abfd, _bfd_slurp_armap, (abfd))"->"206#bfd_generic_archive_p (abfd=0x81aea08) at archive.c:771"[label="abfd->memory|abfd"];
"141#259	  return nbfd;"->"13#203	  nbfd = _bfd_new_bfd ();"[label="nbfd"];
"141#259	  return nbfd;"->"13#203	  nbfd = _bfd_new_bfd ();"[label="nbfd->memory|nbfd"];
"147#3407	  display_any_bfd (file, 0);"->"9#3400	  file = bfd_openr (filename, target);"[label="file"];
"147#3407	  display_any_bfd (file, 0);"->"9#3400	  file = bfd_openr (filename, target);"[label="file->memory|file"];
"20#326		memset (ptr, 0, (size_t) size);"->"16#bfd_zmalloc (size=176) at libbfd.c:319"[label="size"];
"21#329	  return ptr;"->"20#326		memset (ptr, 0, (size_t) size);"[label="*(ptr)|*ptr|ptr"];
"151#3353	  if (bfd_check_format (file, bfd_archive))"->"148#display_any_bfd (file=0x81aea08, level=0) at ./objdump.c:3349"[label="file->memory|file"];
"151#3353	  if (bfd_check_format (file, bfd_archive))"->"148#display_any_bfd (file=0x81aea08, level=0) at ./objdump.c:3349"[label="file"];
"409#562	  ared->parsed_size = parsed_size;"->"376#481	  scan = sscanf (hdr.ar_size, \\"%\\" BFD_VMA_FMT \\"u\\", &parsed_size);"[label="parsed_size"];
"541#922	  for (counter = 0, set = ardata->symdefs;counter<ardata->symdef_count;counter++,set++,rbase+=BSD_SYMDEF_SIZE)"->"492#913	  rbase = raw_armap + BSD_SYMDEF_COUNT_SIZE;"[label="rbase"];
"417#577	  return ared;"->"409#562	  ared->parsed_size = parsed_size;"[label="ared->parsed_size|ared"];
"38#109	  return ret;"->"29#91	  ret = (struct objalloc *) malloc (sizeof *ret);"[label="ret"];
"423#886	  parsed_size = mapdata->parsed_size;"->"326#883	  mapdata = (struct areltdata *) _bfd_read_ar_hdr (abfd);"[label="mapdata->parsed_size|mapdata"];
"552#927	      set->file_offset = H_GET_32 (abfd, rbase + BSD_SYMDEF_OFFSET_SIZE);"->"541#922	  for (counter = 0, set = ardata->symdefs;counter<ardata->symdef_count;counter++,set++,rbase+=BSD_SYMDEF_SIZE)"[label="rbase"];
"555#622	  v = (unsigned long) addr[0];"->"554#619	  const bfd_byte *addr = (const bfd_byte *) p;"[label="*(addr)|*addr|addr"];
"376#481	  scan = sscanf (hdr.ar_size, \\"%\\" BFD_VMA_FMT \\"u\\", &parsed_size);"->"354#291	  nread = fread (buf, 1, nbytes, f);"[label="*(buf)|*buf",style="bold", color="yellow"];
"492#913	  rbase = raw_armap + BSD_SYMDEF_COUNT_SIZE;"->"459#998	  return res;"[label="return dependency:raw_armap",style="dashed", color="orange"];
"141#259	  return nbfd;"->"90#107	  return nbfd;"[label="return dependency:nbfd->memory|nbfd",style="dashed", color="orange"];
"141#259	  return nbfd;"->"90#107	  return nbfd;"[label="return dependency:nbfd",style="dashed", color="orange"];
"147#3407	  display_any_bfd (file, 0);"->"141#259	  return nbfd;"[label="return dependency:file",style="dashed", color="orange"];
"147#3407	  display_any_bfd (file, 0);"->"141#259	  return nbfd;"[label="return dependency:file->memory|file",style="dashed", color="orange"];
"147#3407	  display_any_bfd (file, 0);"->"11#284	  return bfd_fopen (filename, target, FOPEN_RB, -1);"[label="return dependency:file",style="dashed", color="orange"];
"147#3407	  display_any_bfd (file, 0);"->"11#284	  return bfd_fopen (filename, target, FOPEN_RB, -1);"[label="return dependency:file->memory|file",style="dashed", color="orange"];
"90#107	  return nbfd;"->"38#109	  return ret;"[label="return dependency:nbfd->memory|nbfd",style="dashed", color="orange"];
"90#107	  return nbfd;"->"21#329	  return ptr;"[label="return dependency:nbfd",style="dashed", color="orange"];
"423#886	  parsed_size = mapdata->parsed_size;"->"328#442	  return _bfd_generic_read_ar_hdr_mag (abfd, NULL);"[label="return dependency:mapdata->parsed_size|mapdata",style="dashed", color="orange"];
"423#886	  parsed_size = mapdata->parsed_size;"->"417#577	  return ared;"[label="return dependency:mapdata->parsed_size|mapdata",style="dashed", color="orange"];
"459#998	  return res;"->"454#936	  return ret;"[label="return dependency:res",style="dashed", color="orange"];
"206#bfd_generic_archive_p (abfd=0x81aea08) at archive.c:771"->"205#215	      temp = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));"[label="abfd,0",style="dotted", color="forestgreen"];
"263#bfd_slurp_armap (abfd=0x81aea08) at archive.c:1074"->"262#809	  if (!BFD_SEND (abfd, _bfd_slurp_armap, (abfd))"[label="abfd,0",style="dotted", color="forestgreen"];
"16#bfd_zmalloc (size=176) at libbfd.c:319"->"15#63	  nbfd = (bfd *) bfd_zmalloc (sizeof (bfd));"[label="sizeof (bfd),0",style="dotted", color="forestgreen"];
"339#bfd_bread (ptr=0xbfffe500, size=60, abfd=0x81aea08) at bfdio.c:185"->"338#464	  if (bfd_bread (hdrp, sizeof (struct ar_hdr), abfd) != sizeof (struct ar_hdr))"[label="sizeof (struct ar_hdr),1",style="dotted", color="forestgreen"];
"339#bfd_bread (ptr=0xbfffe500, size=60, abfd=0x81aea08) at bfdio.c:185"->"338#464	  if (bfd_bread (hdrp, sizeof (struct ar_hdr), abfd) != sizeof (struct ar_hdr))"[label="abfd,2",style="dotted", color="forestgreen"];
"148#display_any_bfd (file=0x81aea08, level=0) at ./objdump.c:3349"->"147#3407	  display_any_bfd (file, 0);"[label="file,0",style="dotted", color="forestgreen"];
"343#cache_bread (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:311"->"342#198	    nread = abfd->iovec->bread (abfd, ptr, size);"[label="size,2",style="dotted", color="forestgreen"];
"343#cache_bread (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:311"->"342#198	    nread = abfd->iovec->bread (abfd, ptr, size);"[label="abfd,0",style="dotted", color="forestgreen"];
"152#bfd_check_format (abfd=0x81aea08, format=bfd_archive) at format.c:95"->"151#3353	  if (bfd_check_format (file, bfd_archive))"[label="file,0",style="dotted", color="forestgreen"];
"154#bfd_check_format_matches (abfd=0x81aea08, format=bfd_archive, matching=0x0) at format.c:123"->"153#95	  return bfd_check_format_matches (abfd, format, NULL);"[label="abfd,0",style="dotted", color="forestgreen"];
"329#_bfd_generic_read_ar_hdr_mag (abfd=0x81aea08, mag=0x0) at archive.c:450"->"328#442	  return _bfd_generic_read_ar_hdr_mag (abfd, NULL);"[label="abfd,0",style="dotted", color="forestgreen"];
"350#cache_bread_1 (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:271"->"349#325	      chunk_nread = cache_bread_1 (abfd, (char *) buf + nread, chunk_size);"[label="chunk_size,2",style="dotted", color="forestgreen"];
"350#cache_bread_1 (abfd=0x81aea08, buf=0xbfffe500, nbytes=60) at cache.c:271"->"349#325	      chunk_nread = cache_bread_1 (abfd, (char *) buf + nread, chunk_size);"[label="abfd,0",style="dotted", color="forestgreen"];
"449#bfd_zalloc (abfd=0x81aea08, size=0) at opncls.c:995"->"448#889	  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);"[label="abfd,0",style="dotted", color="forestgreen"];
"449#bfd_zalloc (abfd=0x81aea08, size=0) at opncls.c:995"->"448#889	  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);"[label="parsed_size,1",style="dotted", color="forestgreen"];
"451#bfd_alloc (abfd=0x81aea08, size=0) at opncls.c:933"->"450#995	  res = bfd_alloc (abfd, size);"[label="size,1",style="dotted", color="forestgreen"];
"451#bfd_alloc (abfd=0x81aea08, size=0) at opncls.c:933"->"450#995	  res = bfd_alloc (abfd, size);"[label="abfd,0",style="dotted", color="forestgreen"];
"324#do_slurp_bsd_armap (abfd=0x81aea08) at archive.c:878"->"323#1088	    return do_slurp_bsd_armap (abfd);"[label="abfd,0",style="dotted", color="forestgreen"];
"327#_bfd_generic_read_ar_hdr (abfd=0x81aea08) at archive.c:442"->"326#883	  mapdata = (struct areltdata *) _bfd_read_ar_hdr (abfd);"[label="abfd,0",style="dotted", color="forestgreen"];
"553#bfd_getl32 (p=0x81da000) at libbfd.c:619"->"552#927	      set->file_offset = H_GET_32 (abfd, rbase + BSD_SYMDEF_OFFSET_SIZE);"[label="rbase + 4,0",style="dotted", color="forestgreen"];
}