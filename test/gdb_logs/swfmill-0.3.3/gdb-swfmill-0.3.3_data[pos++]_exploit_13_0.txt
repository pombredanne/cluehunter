Already logging to ./gdb.txt.
Breakpoint 1 at 0x804d480: file swfmill.cpp, line 419.
Starting program: /home/yangke/Program/Fabian-Yamaguchi/evdata/swfmill/swfmill-0.3.3/bin/bin/swfmill swf2xml swfmilllog/exploit_13_0

Breakpoint 1, main (argc=3, argv=0xbfffe894) at swfmill.cpp:419
419	int main( int argc, char *argv[] ) {
422		swft_register();
423		exsltRegisterAll();
429		for( ; i<argc && command==NULL; i++ ) {
425		quiet = true;
429		for( ; i<argc && command==NULL; i++ ) {
428		int i=1;
430			if (strncmp(argv[i], "--version", 10) == 0) {
435			if( argv[i][0] == '-' ) {
429		for( ; i<argc && command==NULL; i++ ) {
480		if( !command ) {
485		if( nonet ) xmlSetExternalEntityLoader( xmlNoNetExternalEntityLoader );
487		if( !quiet ) fprintf( stderr, "%s %s\n", PACKAGE_NAME, PACKAGE_VERSION );
489		if( !strcmp( command, "swf2xml" ) ) {
490			return swfmill_swf2xml( argc-i, &argv[i] );
swfmill_swf2xml (argc=argc@entry=1, argv=argv@entry=0xbfffe89c)
    at swfmill.cpp:81
81	int swfmill_swf2xml( int argc, char *argv[] ) {
87		File input;
81	int swfmill_swf2xml( int argc, char *argv[] ) {
87		File input;
91		Context ctx;
87		File input;
SWF::File::File (this=0xbfffe718) at SWFFile.cpp:10
10	File::File() {
12		compressed = false;
13		version = 7;
14		length = 0;
15		header = NULL;
swfmill_swf2xml (argc=argc@entry=1, argv=argv@entry=0xbfffe89c)
    at swfmill.cpp:91
91		Context ctx;
SWF::Context::Context (this=0xbfffe724) at gSWFBasics.cpp:12
12	Context::Context() : swf_encoding(0) {
29	glyphCount = 0;
12	Context::Context() : swf_encoding(0) {
13		swfVersion = 0;
14		transientPropsToXML = false;
15		debugTrace = false;
16		exportAssets = false;
17		isLast = false;
18		tagVersion = 0;
19		quiet = false;
20		convertEncoding = false;
21		fillBits = 0;
22	lineBits = 0;
23	glyphBits = 0;
24	advanceBits = 0;
27	wideGlyphOffsets = 0;
28	wideMap = 0;
29	glyphCount = 0;
swfmill_swf2xml (argc=argc@entry=1, argv=argv@entry=0xbfffe89c)
    at swfmill.cpp:94
94		if( argc < 1 || argc > 2 ) {
98		infile = argv[0];
99		if( argc>1 ) outfile = argv[1];
98		infile = argv[0];
99		if( argc>1 ) outfile = argv[1];
82		const char *infile = NULL, *outfile = "stdout";
102		std_in = !strncmp( infile, "stdin", 5 );
103		std_out = !strncmp( outfile, "stdout", 6 );
102		std_in = !strncmp( infile, "stdin", 5 );
103		std_out = !strncmp( outfile, "stdout", 6 );
104		in_fp = std_in ? stdin : fopen( infile, "rb" );
105		if( !in_fp ) {
110		if( !quiet ) fprintf(stderr,"Reading from %s\n", infile );
114		if( !std_in ) {
113		filesize = (unsigned int)-1;
114		if( !std_in ) {
115			stat( infile, &filestat );
116		filesize = filestat.st_size;
120		ctx.debugTrace = verbose;
124		if (strcmp(swf_encoding, "UTF-8")) {
120		ctx.debugTrace = verbose;
121		ctx.quiet = quiet;
124		if (strcmp(swf_encoding, "UTF-8")) {
130		if( (size = input.load( in_fp, &ctx, filesize )) != 0 ) {
SWF::File::load (this=this@entry=0xbfffe718, fp=fp@entry=0x83bdd50, 
    _ctx=_ctx@entry=0xbfffe724, filesize=filesize@entry=505) at SWFFile.cpp:34
34	int File::load( FILE *fp, Context *_ctx, unsigned int filesize ) {
36		ctx = _ctx ? _ctx : new Context;
42		if( fread( &sig, 3, 1, fp ) != 1
44			|| (strncmp(sig,"CWS",2) && strncmp(sig,"FWS",2)) ) {
43			|| fread( &version, 1, 1, fp ) != 1 
44			|| (strncmp(sig,"CWS",2) && strncmp(sig,"FWS",2)) ) {
50		length = fgetc(fp);
51		length += fgetc(fp)<<8;
52		length += fgetc(fp)<<16;
53		length += fgetc(fp)<<24;
55		ctx->swfVersion = version;
53		length += fgetc(fp)<<24;
55		ctx->swfVersion = version;
61	    if( length != filesize-8 ) {
53		length += fgetc(fp)<<24;
59		compressed = sig[0]=='C';
57		length -= 8;
61	    if( length != filesize-8 ) {
59		compressed = sig[0]=='C';
62	        if( length > filesize-8 && !compressed ) {
57		length -= 8;
59		compressed = sig[0]=='C';
62	        if( length > filesize-8 && !compressed ) {
70		data = new unsigned char[ length ];
71		if( !data ) {
70		data = new unsigned char[ length ];
71		if( !data ) {
77			decompress( data, length, fp );
76		if( compressed ) {
77			decompress( data, length, fp );
76		if( compressed ) {
77			decompress( data, length, fp );
SWF::File::decompress (this=this@entry=0xbfffe718, 
    outputBuffer=outputBuffer@entry=0x83bdeb8 "", len=32780, fp=0x83bdd50)
    at SWFFile.cpp:370
370	void File::decompress( unsigned char *outputBuffer, size_t len, FILE *fp ) {
377		stream.next_out = outputBuffer;
383		status = inflateInit( &stream );
370	void File::decompress( unsigned char *outputBuffer, size_t len, FILE *fp ) {
383		status = inflateInit( &stream );
377		stream.next_out = outputBuffer;
381		stream.avail_out = len;
375		stream.avail_in = 0;
376		stream.next_in = inputBuffer;
378		stream.zalloc = (alloc_func) NULL;
379		stream.zfree = (free_func) NULL;
380		stream.opaque = (voidpf) 0;
381		stream.avail_out = len;
383		status = inflateInit( &stream );
384		if( status != Z_OK ) {
390			if( stream.avail_in == 0 ) {
392				stream.avail_in = fread( inputBuffer, 1, MAX_BUFFER, fp );
391				stream.next_in = inputBuffer;
392				stream.avail_in = fread( inputBuffer, 1, MAX_BUFFER, fp );
395			if( stream.avail_in == 0 ) break;
392				stream.avail_in = fread( inputBuffer, 1, MAX_BUFFER, fp );
395			if( stream.avail_in == 0 ) break;
397			status = inflate( &stream, Z_SYNC_FLUSH );
389		do {
400		if( status != Z_STREAM_END && status != Z_OK ) {
401			fprintf( stderr, "Error decompressing SWF: %s\n", stream.msg );
404	}
SWF::File::load (this=this@entry=0xbfffe718, fp=fp@entry=0x83bdd50, 
    _ctx=_ctx@entry=0xbfffe724, filesize=filesize@entry=505) at SWFFile.cpp:85
85		r = new Reader( data, length );
SWF::Reader::Reader (this=0x83c7a98, d=0x83bdeb8 "", l=32780)
    at SWFReader.cpp:8
8	Reader::Reader( const unsigned char *d, size_t l ) {
9		data = d;
11		pos = 0;
9		data = d;
10		length = l;
12		buf = bits = 0;
13		err = 0;
10		length = l;
13		err = 0;
SWF::File::load (this=this@entry=0xbfffe718, fp=fp@entry=0x83bdd50, 
    _ctx=_ctx@entry=0xbfffe724, filesize=filesize@entry=505) at SWFFile.cpp:86
86		header = new Header;
SWF::Header::Header (this=0x83c7ab0) at gSWFBasics.cpp:625
625	Header::Header() {
SWF::Item::Item (this=0x83c7ab0) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
SWF::Header::Header (this=0x83c7ab0) at gSWFBasics.cpp:625
625	Header::Header() {
Rectangle (this=<optimized out>) at gSWFBasics.cpp:38
38	Rectangle::Rectangle() {
SWF::Header::Header (this=0x83c7ab0) at gSWFBasics.cpp:625
625	Header::Header() {
Rectangle (this=0x83c7abc) at gSWFBasics.cpp:38
38	Rectangle::Rectangle() {
SWF::Item::Item (this=0x83c7abc) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
SWF::Header::Header (this=0x83c7ab0) at gSWFBasics.cpp:627
627	frames = 1;
625	Header::Header() {
Rectangle (this=0x83c7abc) at gSWFBasics.cpp:38
38	Rectangle::Rectangle() {
39		bits = 0;
40	left = 0;
41	right = 0;
42	top = 0;
43	bottom = 0;
SWF::Header::Header (this=0x83c7ab0) at gSWFBasics.cpp:625
625	Header::Header() {
List (ownership=true, this=0x83c7ae4) at ./SWFList.h:19
19					: mOwnership( ownership ) {
20					mFirst = mLast = NULL;
SWF::Header::Header (this=0x83c7ab0) at gSWFBasics.cpp:626
626		framerate = 0;
627	frames = 1;
629	}
SWF::File::load (this=this@entry=0xbfffe718, fp=fp@entry=0x83bdd50, 
    _ctx=_ctx@entry=0xbfffe724, filesize=filesize@entry=505) at SWFFile.cpp:88
88		header->parse( r, length, ctx );
86		header = new Header;
88		header->parse( r, length, ctx );
SWF::Header::parse (this=0x83c7ab0, r=0x83c7a98, end=32780, ctx=0xbfffe724)
    at gSWFParser.cpp:382
382	bool Header::parse( Reader *r, int end, Context *ctx ) {
383		file_offset = r->getPosition();
384		if( ctx->debugTrace ) {
392		size.parse(r,end,ctx);
SWF::Rectangle::parse (this=this@entry=0x83c7abc, r=r@entry=0x83c7a98, 
    end=end@entry=32780, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:12
12	bool Rectangle::parse( Reader *r, int end, Context *ctx ) {
14		if( ctx->debugTrace ) {
13		file_offset = r->getPosition();
14		if( ctx->debugTrace ) {
22		bits = r->getNBitInt(5);
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=n@entry=5, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
288			n -= bits;
289			while( n > 8 ) {
288			n -= bits;
289			while( n > 8 ) {
294			buf = getByte();
getByte (this=0x83c7a98) at SWFReader.cpp:29
29		if( pos+1 > length ) {
34		return data[pos++];
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=<optimized out>, 
    n@entry=5, is_signed=is_signed@entry=false) at SWFReader.cpp:296
296			if( n > 0 ) {
294			buf = getByte();
296			if( n > 0 ) {
297				r <<= n;
298				bits = 8-n;
297				r <<= n;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
298				bits = 8-n;
301				buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7abc, r=r@entry=0x83c7a98, 
    end=end@entry=32780, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:23
23		if( ctx->debugTrace ) {
22		bits = r->getNBitInt(5);
23		if( ctx->debugTrace ) {
28		left = r->getNBitInt(bits,true);
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=0, 
    is_signed=is_signed@entry=true) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
306		r = buf >> (bits-n);
308		buf &= (1<<bits)-1;
306		r = buf >> (bits-n);
307		bits -= n;
308		buf &= (1<<bits)-1;
307		bits -= n;
308		buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
311		long sign = (1<<(orig_n-1));
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7abc, r=r@entry=0x83c7a98, 
    end=end@entry=32780, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:29
29		if( ctx->debugTrace ) {
28		left = r->getNBitInt(bits,true);
29		if( ctx->debugTrace ) {
34		right = r->getNBitInt(bits,true);
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=0, 
    is_signed=is_signed@entry=true) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
306		r = buf >> (bits-n);
308		buf &= (1<<bits)-1;
306		r = buf >> (bits-n);
307		bits -= n;
308		buf &= (1<<bits)-1;
307		bits -= n;
308		buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
311		long sign = (1<<(orig_n-1));
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7abc, r=r@entry=0x83c7a98, 
    end=end@entry=32780, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:35
35		if( ctx->debugTrace ) {
34		right = r->getNBitInt(bits,true);
35		if( ctx->debugTrace ) {
40		top = r->getNBitInt(bits,true);
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=0, 
    is_signed=is_signed@entry=true) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
306		r = buf >> (bits-n);
308		buf &= (1<<bits)-1;
306		r = buf >> (bits-n);
307		bits -= n;
308		buf &= (1<<bits)-1;
307		bits -= n;
308		buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
311		long sign = (1<<(orig_n-1));
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7abc, r=r@entry=0x83c7a98, 
    end=end@entry=32780, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:41
41		if( ctx->debugTrace ) {
40		top = r->getNBitInt(bits,true);
41		if( ctx->debugTrace ) {
46		bottom = r->getNBitInt(bits,true);
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=0, 
    is_signed=is_signed@entry=true) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
306		r = buf >> (bits-n);
308		buf &= (1<<bits)-1;
306		r = buf >> (bits-n);
307		bits -= n;
308		buf &= (1<<bits)-1;
307		bits -= n;
308		buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
311		long sign = (1<<(orig_n-1));
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7abc, r=r@entry=0x83c7a98, 
    end=end@entry=32780, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:47
47		if( ctx->debugTrace ) {
46		bottom = r->getNBitInt(bits,true);
47		if( ctx->debugTrace ) {
53		r->byteAlign();
byteAlign (this=0x83c7a98) at ./SWFReader.h:44
44				if( buf != 0 ) fprintf(stderr,"buf is nonzero in byteAlign() @%i\n", pos );
SWF::Rectangle::parse (this=this@entry=0x83c7abc, r=r@entry=0x83c7a98, 
    end=end@entry=32780, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:56
56		return r->getError() == SWFR_OK;
53		r->byteAlign();
byteAlign (this=0x83c7a98) at ./SWFReader.h:45
45				buf = bits = 0; }
SWF::Rectangle::parse (this=this@entry=0x83c7abc, r=r@entry=0x83c7a98, 
    end=end@entry=32780, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:56
56		return r->getError() == SWFR_OK;
57	}
SWF::Header::parse (this=0x83c7ab0, r=0x83c7a98, end=32780, ctx=0xbfffe724)
    at gSWFParser.cpp:393
393	framerate = r->getNBitInt(16);
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=n@entry=16, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
288			n -= bits;
289			while( n > 8 ) {
288			n -= bits;
289			while( n > 8 ) {
291				r += getByte();
getByte (this=<optimized out>) at SWFReader.cpp:31
31			pos = length+1;
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=n@entry=16, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:289
289			while( n > 8 ) {
291				r += getByte();
getByte (this=<optimized out>) at SWFReader.cpp:31
31			pos = length+1;
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=n@entry=16, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:290
290				r <<= 8;
291				r += getByte();
getByte (this=0x83c7a98) at SWFReader.cpp:29
29		if( pos+1 > length ) {
34		return data[pos++];
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=n@entry=16, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:292
292				n-=8;
291				r += getByte();
getByte (this=0x83c7a98) at SWFReader.cpp:34
34		return data[pos++];
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=n@entry=16, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:291
291				r += getByte();
289			while( n > 8 ) {
294			buf = getByte();
getByte (this=0x83c7a98) at SWFReader.cpp:29
29		if( pos+1 > length ) {
34		return data[pos++];
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=<optimized out>, 
    n@entry=16, is_signed=is_signed@entry=false) at SWFReader.cpp:296
296			if( n > 0 ) {
294			buf = getByte();
296			if( n > 0 ) {
297				r <<= n;
298				bits = 8-n;
297				r <<= n;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
298				bits = 8-n;
301				buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Header::parse (this=0x83c7ab0, r=0x83c7a98, end=32780, ctx=0xbfffe724)
    at gSWFParser.cpp:394
394		if( ctx->debugTrace ) {
393	framerate = r->getNBitInt(16);
394		if( ctx->debugTrace ) {
399		frames = r->getWord();
SWF::Reader::getWord (this=this@entry=0x83c7a98) at SWFReader.cpp:37
37	uint16_t Reader::getWord() {
38		if( pos+2 > length ) {
44		int r = data[pos++];
45		r += data[pos++]<<8;
44		int r = data[pos++];
45		r += data[pos++]<<8;
47	}
45		r += data[pos++]<<8;
46		return r;
47	}
SWF::Header::parse (this=0x83c7ab0, r=0x83c7a98, end=32780, ctx=0xbfffe724)
    at gSWFParser.cpp:400
400		if( ctx->debugTrace ) {
399		frames = r->getWord();
400		if( ctx->debugTrace ) {
418			if( r->getPosition() < myend ) {
424						item = Tag::get(r,myend,ctx);
SWF::Tag::get (r=r@entry=0x83c7a98, end=end@entry=32780, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:7
7	Tag *Tag::get( Reader *r, int end, Context *ctx ) {
8		uint16_t h = r->getWord();
SWF::Reader::getWord (this=this@entry=0x83c7a98) at SWFReader.cpp:37
37	uint16_t Reader::getWord() {
38		if( pos+2 > length ) {
44		int r = data[pos++];
45		r += data[pos++]<<8;
44		int r = data[pos++];
45		r += data[pos++]<<8;
47	}
45		r += data[pos++]<<8;
46		return r;
47	}
SWF::Tag::get (r=r@entry=0x83c7a98, end=end@entry=32780, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:10
10		int len = h&0x3F;
9		int type = h>>6;
10		int len = h&0x3F;
9		int type = h>>6;
11		if( len == 0x3F ) { // long size
12			len = r->getInt();
SWF::Reader::getInt (this=this@entry=0x83c7a98) at SWFReader.cpp:49
49	uint32_t Reader::getInt() {
50		if( pos+4 > length ) {
58		r = data[pos++];
59		r += data[pos++]<<8;
58		r = data[pos++];
59		r += data[pos++]<<8;
60		r += data[pos++]<<16;
59		r += data[pos++]<<8;
60		r += data[pos++]<<16;
61		r += data[pos++]<<24;
64	}
61		r += data[pos++]<<24;
64	}
SWF::Tag::get (r=r@entry=0x83c7a98, end=end@entry=32780, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:16
16		if( len > 100000000 ) {
12			len = r->getInt();
16		if( len > 100000000 ) {
22		Tag *ret = getByType( type );
getByType (type=<optimized out>) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
64						ret = Registry[i].factory();
62				for( int i=0; i<nRegistered; i++ ) {
64						ret = Registry[i].factory();
SWF::DefineShapeFactory () at gSWFBasics.cpp:17060
17060		Tag *DefineShapeFactory() {
17061				return (Tag*)new DefineShape;
SWF::DefineShape::DefineShape (this=0x83c7af8) at gSWFBasics.cpp:5513
5513	DefineShape::DefineShape() {
Tag (this=0x83c7af8) at gSWFBasics.cpp:5513
5513	DefineShape::DefineShape() {
IdItem (this=0x83c7af8) at ./SWFIdItem.h:12
12			IdItem() { type = 0; len = 0; }
SWF::Item::Item (this=0x83c7af8) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
SWF::DefineShape::DefineShape (this=0x83c7af8) at gSWFBasics.cpp:5513
5513	DefineShape::DefineShape() {
Rectangle (this=<optimized out>) at gSWFBasics.cpp:38
38	Rectangle::Rectangle() {
SWF::DefineShape::DefineShape (this=0x83c7af8) at gSWFBasics.cpp:5513
5513	DefineShape::DefineShape() {
Tag (this=0x83c7af8) at gSWFBasics.cpp:5513
5513	DefineShape::DefineShape() {
IdItem (this=0x83c7af8) at ./SWFIdItem.h:12
12			IdItem() { type = 0; len = 0; }
SWF::DefineShape::DefineShape (this=0x83c7af8) at gSWFBasics.cpp:5513
5513	DefineShape::DefineShape() {
Rectangle (this=0x83c7b10) at gSWFBasics.cpp:38
38	Rectangle::Rectangle() {
SWF::Item::Item (this=0x83c7b10) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
SWF::DefineShape::DefineShape (this=0x83c7af8) at gSWFBasics.cpp:5513
5513	DefineShape::DefineShape() {
Rectangle (this=0x83c7b10) at gSWFBasics.cpp:38
38	Rectangle::Rectangle() {
39		bits = 0;
40	left = 0;
41	right = 0;
42	top = 0;
43	bottom = 0;
SWF::DefineShape::DefineShape (this=0x83c7af8) at gSWFBasics.cpp:5513
5513	DefineShape::DefineShape() {
SWF::StyleList::StyleList (this=0x83c7b30) at gSWFBasics.cpp:845
845	StyleList::StyleList() {
SWF::Item::Item (this=0x83c7b30) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
SWF::StyleList::StyleList (this=0x83c7b30) at gSWFBasics.cpp:846
846		n_fillStyles = 0;
847	n_lineStyles = 0;
845	StyleList::StyleList() {
List (ownership=true, this=0x83c7b40) at ./SWFList.h:19
19					: mOwnership( ownership ) {
20					mFirst = mLast = NULL;
SWF::StyleList::StyleList (this=0x83c7b30) at gSWFBasics.cpp:845
845	StyleList::StyleList() {
List (ownership=true, this=0x83c7b50) at ./SWFList.h:19
19					: mOwnership( ownership ) {
20					mFirst = mLast = NULL;
SWF::StyleList::StyleList (this=0x83c7b30) at gSWFBasics.cpp:846
846		n_fillStyles = 0;
847	n_lineStyles = 0;
848	fillBits = 0;
849	lineBits = 0;
851	}
SWF::DefineShape::DefineShape (this=0x83c7af8) at gSWFBasics.cpp:5513
5513	DefineShape::DefineShape() {
Shape (this=0x83c7b64) at gSWFBasics.cpp:1164
1164	Shape::Shape() {
SWF::Item::Item (this=0x83c7b64) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
SWF::DefineShape::DefineShape (this=0x83c7af8) at gSWFBasics.cpp:5514
5514		objectID = 0;
5513	DefineShape::DefineShape() {
Shape (this=0x83c7b64) at gSWFBasics.cpp:1164
1164	Shape::Shape() {
List (ownership=true, this=0x83c7b70) at ./SWFList.h:19
19					: mOwnership( ownership ) {
20					mFirst = mLast = NULL;
SWF::DefineShape::DefineShape (this=0x83c7af8) at gSWFBasics.cpp:5514
5514		objectID = 0;
5516	}
SWF::DefineShapeFactory () at gSWFBasics.cpp:17062
17062			}
getByType (type=<optimized out>) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
64						ret = Registry[i].factory();
62				for( int i=0; i<nRegistered; i++ ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
SWF::Tag::get (r=r@entry=0x83c7a98, end=end@entry=32780, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:24
24		if( !ret ) {
30		ret->parse( r, r->getPosition()+len, ctx );
28		ret->setType( type );
setType (this=0x83c7af8, t=2) at ./SWFIdItem.h:17
17			void setType( int t ) { type = t; }
SWF::Tag::get (r=r@entry=0x83c7a98, end=end@entry=32780, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:29
29		ret->setLength( len );
setLength (this=0x83c7af8, l=-2144329664) at ./SWFIdItem.h:20
20			void setLength( int l ) { len = l; }
SWF::Tag::get (r=r@entry=0x83c7a98, end=end@entry=32780, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:30
30		ret->parse( r, r->getPosition()+len, ctx );
SWF::DefineShape::parse (this=0x83c7af8, r=0x83c7a98, end=-2144329653, 
    ctx=0xbfffe724) at gSWFParser.cpp:5036
5036	bool DefineShape::parse( Reader *r, int end, Context *ctx ) {
5038		if( ctx->debugTrace ) {
5037		file_offset = r->getPosition();
5038		if( ctx->debugTrace ) {
5047		ctx->alpha = 0;
5049		ctx->many_shapes = 0;
5051		ctx->tagVersion = 1;
5052	objectID = r->getWord();
SWF::Reader::getWord (this=this@entry=0x83c7a98) at SWFReader.cpp:37
37	uint16_t Reader::getWord() {
38		if( pos+2 > length ) {
44		int r = data[pos++];
45		r += data[pos++]<<8;
44		int r = data[pos++];
45		r += data[pos++]<<8;
47	}
45		r += data[pos++]<<8;
46		return r;
47	}
SWF::DefineShape::parse (this=0x83c7af8, r=0x83c7a98, end=-2144329653, 
    ctx=0xbfffe724) at gSWFParser.cpp:5053
5053		if( ctx->debugTrace ) {
5052	objectID = r->getWord();
5053		if( ctx->debugTrace ) {
5058		bounds.parse(r,end,ctx);
SWF::Rectangle::parse (this=this@entry=0x83c7b10, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:12
12	bool Rectangle::parse( Reader *r, int end, Context *ctx ) {
14		if( ctx->debugTrace ) {
13		file_offset = r->getPosition();
14		if( ctx->debugTrace ) {
22		bits = r->getNBitInt(5);
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=n@entry=5, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
288			n -= bits;
289			while( n > 8 ) {
288			n -= bits;
289			while( n > 8 ) {
294			buf = getByte();
getByte (this=0x83c7a98) at SWFReader.cpp:29
29		if( pos+1 > length ) {
34		return data[pos++];
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=<optimized out>, 
    n@entry=5, is_signed=is_signed@entry=false) at SWFReader.cpp:296
296			if( n > 0 ) {
294			buf = getByte();
296			if( n > 0 ) {
297				r <<= n;
298				bits = 8-n;
297				r <<= n;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
298				bits = 8-n;
301				buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7b10, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:23
23		if( ctx->debugTrace ) {
22		bits = r->getNBitInt(5);
23		if( ctx->debugTrace ) {
28		left = r->getNBitInt(bits,true);
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=0, 
    is_signed=is_signed@entry=true) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
306		r = buf >> (bits-n);
308		buf &= (1<<bits)-1;
306		r = buf >> (bits-n);
307		bits -= n;
308		buf &= (1<<bits)-1;
307		bits -= n;
308		buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
311		long sign = (1<<(orig_n-1));
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7b10, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:29
29		if( ctx->debugTrace ) {
28		left = r->getNBitInt(bits,true);
29		if( ctx->debugTrace ) {
34		right = r->getNBitInt(bits,true);
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=0, 
    is_signed=is_signed@entry=true) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
306		r = buf >> (bits-n);
308		buf &= (1<<bits)-1;
306		r = buf >> (bits-n);
307		bits -= n;
308		buf &= (1<<bits)-1;
307		bits -= n;
308		buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
311		long sign = (1<<(orig_n-1));
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7b10, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:35
35		if( ctx->debugTrace ) {
34		right = r->getNBitInt(bits,true);
35		if( ctx->debugTrace ) {
40		top = r->getNBitInt(bits,true);
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=0, 
    is_signed=is_signed@entry=true) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
306		r = buf >> (bits-n);
308		buf &= (1<<bits)-1;
306		r = buf >> (bits-n);
307		bits -= n;
308		buf &= (1<<bits)-1;
307		bits -= n;
308		buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
311		long sign = (1<<(orig_n-1));
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7b10, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:41
41		if( ctx->debugTrace ) {
40		top = r->getNBitInt(bits,true);
41		if( ctx->debugTrace ) {
46		bottom = r->getNBitInt(bits,true);
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=0, 
    is_signed=is_signed@entry=true) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
306		r = buf >> (bits-n);
308		buf &= (1<<bits)-1;
306		r = buf >> (bits-n);
307		bits -= n;
308		buf &= (1<<bits)-1;
307		bits -= n;
308		buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
311		long sign = (1<<(orig_n-1));
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7b10, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:47
47		if( ctx->debugTrace ) {
46		bottom = r->getNBitInt(bits,true);
47		if( ctx->debugTrace ) {
53		r->byteAlign();
byteAlign (this=0x83c7a98) at ./SWFReader.h:44
44				if( buf != 0 ) fprintf(stderr,"buf is nonzero in byteAlign() @%i\n", pos );
SWF::Rectangle::parse (this=this@entry=0x83c7b10, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:56
56		return r->getError() == SWFR_OK;
53		r->byteAlign();
byteAlign (this=0x83c7a98) at ./SWFReader.h:45
45				buf = bits = 0; }
SWF::Rectangle::parse (this=this@entry=0x83c7b10, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:56
56		return r->getError() == SWFR_OK;
57	}
SWF::DefineShape::parse (this=0x83c7af8, r=0x83c7a98, end=-2144329653, 
    ctx=0xbfffe724) at gSWFParser.cpp:5059
5059	styles.parse(r,end,ctx);
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:617
617	bool StyleList::parse( Reader *r, int end, Context *ctx ) {
618		file_offset = r->getPosition();
619		if( ctx->debugTrace ) {
627		n_fillStyles = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:628
628	    if( n_fillStyles == 0xff && ctx->tagVersion >= 2 ) {
627		n_fillStyles = r->getByte();
628	    if( n_fillStyles == 0xff && ctx->tagVersion >= 2 ) {
632		if( ctx->debugTrace ) {
650			for( int i=0; i<n_fillStyles; i++ ) {
651				item = Style::get(r,end,ctx);
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:29
29				int type = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:30
30				int len = end - r->getPosition();
32				T* ret = getByType( type );
getByType (type=<optimized out>) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:29
29				int type = r->getByte();
30				int len = end - r->getPosition();
32				T* ret = getByType( type );
getByType (type=<optimized out>) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:30
30				int len = end - r->getPosition();
32				T* ret = getByType( type );
getByType (type=4) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
60				T *ret = NULL;
62				for( int i=0; i<nRegistered; i++ ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:34
34				if( ret ) {
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:651
651				item = Style::get(r,end,ctx);
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at gSWFParser.cpp:651
651				item = Style::get(r,end,ctx);
fprintf (__fmt=0x81599fc "WARNING: unknown %s type 0x%02X\n", 
    __stream=<optimized out>) at /usr/include/i386-linux-gnu/bits/stdio2.h:98
98				__va_arg_pack ());
___fprintf_chk (fp=0xb7be3960 <_IO_2_1_stderr_>, flag=1, 
    format=0x81599fc "WARNING: unknown %s type 0x%02X\n") at fprintf_chk.c:26
26	fprintf_chk.c: No such file or directory.
Run till exit from #0  ___fprintf_chk (fp=0xb7be3960 <_IO_2_1_stderr_>, 
    flag=1, format=0x81599fc "WARNING: unknown %s type 0x%02X\n")
    at fprintf_chk.c:26
0x080a64b4 in fprintf (__fmt=0x81599fc "WARNING: unknown %s type 0x%02X\n", 
    __stream=<optimized out>) at /usr/include/i386-linux-gnu/bits/stdio2.h:98
98				__va_arg_pack ());
Value returned is $1 = 38
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:652
652				fillStyles.append( item );
append (user_data=0x0, data=<optimized out>, this=0x83c7b40) at ./SWFList.h:41
41					if( !mLast ) {
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:652
652				fillStyles.append( item );
append (user_data=0x0, data=<optimized out>, this=0x83c7b40) at ./SWFList.h:42
42						if( !mFirst ) {
43							return mFirst = mLast = new ListItem<T>( data, NULL, user_data );
ListItem (user_data=0x0, insertAfter=0x0, data=<optimized out>, this=0x83c7b80)
    at ./SWFList.h:123
123					mData = data;
124					mPrevious = insertAfter;
125					mNext = insertAfter ? insertAfter->replaceNext( this ) : NULL;
127					mUserData = user_data;
append (user_data=0x0, data=<optimized out>, this=0x83c7b40) at ./SWFList.h:43
43							return mFirst = mLast = new ListItem<T>( data, NULL, user_data );
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:650
650			for( int i=0; i<n_fillStyles; i++ ) {
651				item = Style::get(r,end,ctx);
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:29
29				int type = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:30
30				int len = end - r->getPosition();
32				T* ret = getByType( type );
getByType (type=<optimized out>) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:29
29				int type = r->getByte();
30				int len = end - r->getPosition();
32				T* ret = getByType( type );
getByType (type=<optimized out>) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:30
30				int len = end - r->getPosition();
32				T* ret = getByType( type );
getByType (type=0) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
60				T *ret = NULL;
62				for( int i=0; i<nRegistered; i++ ) {
63					if( Registry[i].type == type ) {
64						ret = Registry[i].factory();
SWF::SolidFactory () at gSWFBasics.cpp:17921
17921	Style *SolidFactory() {
17922				return (Style*)new Solid;
SWF::Solid::Solid (this=0x83c7b98) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
Style (this=0x83c7b98) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
IdItem (this=0x83c7b98) at ./SWFIdItem.h:12
12			IdItem() { type = 0; len = 0; }
SWF::Item::Item (this=0x83c7b98) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
SWF::Solid::Solid (this=0x83c7b98) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
Color (this=<optimized out>) at gSWFBasics.cpp:133
133	Color::Color() {
SWF::Solid::Solid (this=0x83c7b98) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
Style (this=0x83c7b98) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
IdItem (this=0x83c7b98) at ./SWFIdItem.h:12
12			IdItem() { type = 0; len = 0; }
SWF::Solid::Solid (this=0x83c7b98) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
Color (this=0x83c7bac) at gSWFBasics.cpp:133
133	Color::Color() {
SWF::Item::Item (this=0x83c7bac) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
Color (this=0x83c7bac) at gSWFBasics.cpp:134
134		red = 0;
135	green = 0;
136	blue = 0;
137	alpha = 0;
SWF::Solid::Solid (this=0x83c7b98) at gSWFBasics.cpp:5008
5008	}
SWF::SolidFactory () at gSWFBasics.cpp:17923
17923			}
getByType (type=0) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:34
34				if( ret ) {
35					ret->setType( type );
setType (this=0x83c7b98, t=0) at ./SWFIdItem.h:17
17			void setType( int t ) { type = t; }
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:37
37					ret->parse( r, end, ctx );
36					ret->setLength( len );
setLength (this=0x83c7b98, l=-2144329670) at ./SWFIdItem.h:20
20			void setLength( int l ) { len = l; }
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:37
37					ret->parse( r, end, ctx );
SWF::Solid::parse (this=0x83c7b98, r=0x83c7a98, end=-2144329653, 
    ctx=0xbfffe724) at gSWFParser.cpp:4553
4553	bool Solid::parse( Reader *r, int end, Context *ctx ) {
4555		if( ctx->debugTrace ) {
4554		file_offset = r->getPosition();
4555		if( ctx->debugTrace ) {
4563		color.parse(r,end,ctx);
SWF::Color::parse (this=this@entry=0x83c7bac, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:62
62	bool Color::parse( Reader *r, int end, Context *ctx ) {
64		if( ctx->debugTrace ) {
63		file_offset = r->getPosition();
64		if( ctx->debugTrace ) {
72		red = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
SWF::Color::parse (this=this@entry=0x83c7bac, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:73
73		if( ctx->debugTrace ) {
78		green = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
SWF::Color::parse (this=this@entry=0x83c7bac, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:79
79		if( ctx->debugTrace ) {
84		blue = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
SWF::Color::parse (this=this@entry=0x83c7bac, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:85
85		if( ctx->debugTrace ) {
94		if( ctx->alpha ) {
109			alpha =  0;
113		r->byteAlign();
byteAlign (this=0x83c7a98) at ./SWFReader.h:44
44				if( buf != 0 ) fprintf(stderr,"buf is nonzero in byteAlign() @%i\n", pos );
SWF::Color::parse (this=this@entry=0x83c7bac, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:116
116		return r->getError() == SWFR_OK;
113		r->byteAlign();
byteAlign (this=0x83c7a98) at ./SWFReader.h:45
45				buf = bits = 0; }
SWF::Color::parse (this=this@entry=0x83c7bac, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:116
116		return r->getError() == SWFR_OK;
117	}
SWF::Solid::parse (this=0x83c7b98, r=0x83c7a98, end=-2144329653, 
    ctx=0xbfffe724) at gSWFParser.cpp:4566
4566		return r->getError() == SWFR_OK;
4567	}
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:652
652				fillStyles.append( item );
append (user_data=0x0, data=<optimized out>, this=0x83c7b40) at ./SWFList.h:41
41					if( !mLast ) {
49						return mLast = new ListItem<T>( data, mLast, user_data );
ListItem (user_data=0x0, insertAfter=0x83c7b80, data=<optimized out>, 
    this=0x83c7bc0) at ./SWFList.h:125
125					mNext = insertAfter ? insertAfter->replaceNext( this ) : NULL;
123					mData = data;
124					mPrevious = insertAfter;
125					mNext = insertAfter ? insertAfter->replaceNext( this ) : NULL;
replaceNext (this=<optimized out>, next=0x83c7bc0) at ./SWFList.h:131
131					ListItem *ret = mNext;
132					mNext = next;
ListItem (user_data=0x0, insertAfter=0x83c7b80, data=<optimized out>, 
    this=0x83c7bc0) at ./SWFList.h:126
126					if( mNext ) mNext->mPrevious = this;
125					mNext = insertAfter ? insertAfter->replaceNext( this ) : NULL;
126					if( mNext ) mNext->mPrevious = this;
127					mUserData = user_data;
append (user_data=0x0, data=<optimized out>, this=0x83c7b40) at ./SWFList.h:49
49						return mLast = new ListItem<T>( data, mLast, user_data );
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:650
650			for( int i=0; i<n_fillStyles; i++ ) {
651				item = Style::get(r,end,ctx);
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:29
29				int type = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:30
30				int len = end - r->getPosition();
32				T* ret = getByType( type );
getByType (type=<optimized out>) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:29
29				int type = r->getByte();
30				int len = end - r->getPosition();
32				T* ret = getByType( type );
getByType (type=<optimized out>) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:30
30				int len = end - r->getPosition();
32				T* ret = getByType( type );
getByType (type=0) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
60				T *ret = NULL;
62				for( int i=0; i<nRegistered; i++ ) {
63					if( Registry[i].type == type ) {
64						ret = Registry[i].factory();
SWF::SolidFactory () at gSWFBasics.cpp:17921
17921	Style *SolidFactory() {
17922				return (Style*)new Solid;
SWF::Solid::Solid (this=0x83c7bd8) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
Style (this=0x83c7bd8) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
IdItem (this=0x83c7bd8) at ./SWFIdItem.h:12
12			IdItem() { type = 0; len = 0; }
SWF::Item::Item (this=0x83c7bd8) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
SWF::Solid::Solid (this=0x83c7bd8) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
Color (this=<optimized out>) at gSWFBasics.cpp:133
133	Color::Color() {
SWF::Solid::Solid (this=0x83c7bd8) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
Style (this=0x83c7bd8) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
IdItem (this=0x83c7bd8) at ./SWFIdItem.h:12
12			IdItem() { type = 0; len = 0; }
SWF::Solid::Solid (this=0x83c7bd8) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
Color (this=0x83c7bec) at gSWFBasics.cpp:133
133	Color::Color() {
SWF::Item::Item (this=0x83c7bec) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
Color (this=0x83c7bec) at gSWFBasics.cpp:134
134		red = 0;
135	green = 0;
136	blue = 0;
137	alpha = 0;
SWF::Solid::Solid (this=0x83c7bd8) at gSWFBasics.cpp:5008
5008	}
SWF::SolidFactory () at gSWFBasics.cpp:17923
17923			}
getByType (type=0) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:34
34				if( ret ) {
35					ret->setType( type );
setType (this=0x83c7bd8, t=0) at ./SWFIdItem.h:17
17			void setType( int t ) { type = t; }
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:37
37					ret->parse( r, end, ctx );
36					ret->setLength( len );
setLength (this=0x83c7bd8, l=-2144329674) at ./SWFIdItem.h:20
20			void setLength( int l ) { len = l; }
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:37
37					ret->parse( r, end, ctx );
SWF::Solid::parse (this=0x83c7bd8, r=0x83c7a98, end=-2144329653, 
    ctx=0xbfffe724) at gSWFParser.cpp:4553
4553	bool Solid::parse( Reader *r, int end, Context *ctx ) {
4555		if( ctx->debugTrace ) {
4554		file_offset = r->getPosition();
4555		if( ctx->debugTrace ) {
4563		color.parse(r,end,ctx);
SWF::Color::parse (this=this@entry=0x83c7bec, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:62
62	bool Color::parse( Reader *r, int end, Context *ctx ) {
64		if( ctx->debugTrace ) {
63		file_offset = r->getPosition();
64		if( ctx->debugTrace ) {
72		red = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
SWF::Color::parse (this=this@entry=0x83c7bec, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:73
73		if( ctx->debugTrace ) {
78		green = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
SWF::Color::parse (this=this@entry=0x83c7bec, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:79
79		if( ctx->debugTrace ) {
84		blue = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
SWF::Color::parse (this=this@entry=0x83c7bec, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:85
85		if( ctx->debugTrace ) {
94		if( ctx->alpha ) {
109			alpha =  0;
113		r->byteAlign();
byteAlign (this=0x83c7a98) at ./SWFReader.h:44
44				if( buf != 0 ) fprintf(stderr,"buf is nonzero in byteAlign() @%i\n", pos );
SWF::Color::parse (this=this@entry=0x83c7bec, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:116
116		return r->getError() == SWFR_OK;
113		r->byteAlign();
byteAlign (this=0x83c7a98) at ./SWFReader.h:45
45				buf = bits = 0; }
SWF::Color::parse (this=this@entry=0x83c7bec, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:116
116		return r->getError() == SWFR_OK;
117	}
SWF::Solid::parse (this=0x83c7bd8, r=0x83c7a98, end=-2144329653, 
    ctx=0xbfffe724) at gSWFParser.cpp:4566
4566		return r->getError() == SWFR_OK;
4567	}
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:652
652				fillStyles.append( item );
append (user_data=0x0, data=<optimized out>, this=0x83c7b40) at ./SWFList.h:41
41					if( !mLast ) {
49						return mLast = new ListItem<T>( data, mLast, user_data );
ListItem (user_data=0x0, insertAfter=0x83c7bc0, data=<optimized out>, 
    this=0x83c7c00) at ./SWFList.h:125
125					mNext = insertAfter ? insertAfter->replaceNext( this ) : NULL;
123					mData = data;
124					mPrevious = insertAfter;
125					mNext = insertAfter ? insertAfter->replaceNext( this ) : NULL;
replaceNext (this=<optimized out>, next=0x83c7c00) at ./SWFList.h:131
131					ListItem *ret = mNext;
132					mNext = next;
ListItem (user_data=0x0, insertAfter=0x83c7bc0, data=<optimized out>, 
    this=0x83c7c00) at ./SWFList.h:126
126					if( mNext ) mNext->mPrevious = this;
125					mNext = insertAfter ? insertAfter->replaceNext( this ) : NULL;
126					if( mNext ) mNext->mPrevious = this;
127					mUserData = user_data;
append (user_data=0x0, data=<optimized out>, this=0x83c7b40) at ./SWFList.h:49
49						return mLast = new ListItem<T>( data, mLast, user_data );
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:650
650			for( int i=0; i<n_fillStyles; i++ ) {
651				item = Style::get(r,end,ctx);
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:29
29				int type = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:30
30				int len = end - r->getPosition();
32				T* ret = getByType( type );
getByType (type=<optimized out>) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:29
29				int type = r->getByte();
30				int len = end - r->getPosition();
32				T* ret = getByType( type );
getByType (type=<optimized out>) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:30
30				int len = end - r->getPosition();
32				T* ret = getByType( type );
getByType (type=0) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
60				T *ret = NULL;
62				for( int i=0; i<nRegistered; i++ ) {
63					if( Registry[i].type == type ) {
64						ret = Registry[i].factory();
SWF::SolidFactory () at gSWFBasics.cpp:17921
17921	Style *SolidFactory() {
17922				return (Style*)new Solid;
SWF::Solid::Solid (this=0x83c7c18) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
Style (this=0x83c7c18) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
IdItem (this=0x83c7c18) at ./SWFIdItem.h:12
12			IdItem() { type = 0; len = 0; }
SWF::Item::Item (this=0x83c7c18) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
SWF::Solid::Solid (this=0x83c7c18) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
Color (this=<optimized out>) at gSWFBasics.cpp:133
133	Color::Color() {
SWF::Solid::Solid (this=0x83c7c18) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
Style (this=0x83c7c18) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
IdItem (this=0x83c7c18) at ./SWFIdItem.h:12
12			IdItem() { type = 0; len = 0; }
SWF::Solid::Solid (this=0x83c7c18) at gSWFBasics.cpp:5006
5006	Solid::Solid() {
Color (this=0x83c7c2c) at gSWFBasics.cpp:133
133	Color::Color() {
SWF::Item::Item (this=0x83c7c2c) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
Color (this=0x83c7c2c) at gSWFBasics.cpp:134
134		red = 0;
135	green = 0;
136	blue = 0;
137	alpha = 0;
SWF::Solid::Solid (this=0x83c7c18) at gSWFBasics.cpp:5008
5008	}
SWF::SolidFactory () at gSWFBasics.cpp:17923
17923			}
getByType (type=0) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:34
34				if( ret ) {
35					ret->setType( type );
setType (this=0x83c7c18, t=0) at ./SWFIdItem.h:17
17			void setType( int t ) { type = t; }
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:37
37					ret->parse( r, end, ctx );
36					ret->setLength( len );
setLength (this=0x83c7c18, l=-2144329678) at ./SWFIdItem.h:20
20			void setLength( int l ) { len = l; }
get (ctx=0xbfffe724, end=-2144329653, r=0x83c7a98) at ./SWFIdItem.h:37
37					ret->parse( r, end, ctx );
SWF::Solid::parse (this=0x83c7c18, r=0x83c7a98, end=-2144329653, 
    ctx=0xbfffe724) at gSWFParser.cpp:4553
4553	bool Solid::parse( Reader *r, int end, Context *ctx ) {
4555		if( ctx->debugTrace ) {
4554		file_offset = r->getPosition();
4555		if( ctx->debugTrace ) {
4563		color.parse(r,end,ctx);
SWF::Color::parse (this=this@entry=0x83c7c2c, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:62
62	bool Color::parse( Reader *r, int end, Context *ctx ) {
64		if( ctx->debugTrace ) {
63		file_offset = r->getPosition();
64		if( ctx->debugTrace ) {
72		red = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
SWF::Color::parse (this=this@entry=0x83c7c2c, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:73
73		if( ctx->debugTrace ) {
78		green = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
SWF::Color::parse (this=this@entry=0x83c7c2c, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:79
79		if( ctx->debugTrace ) {
84		blue = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
SWF::Color::parse (this=this@entry=0x83c7c2c, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:85
85		if( ctx->debugTrace ) {
94		if( ctx->alpha ) {
109			alpha =  0;
113		r->byteAlign();
byteAlign (this=0x83c7a98) at ./SWFReader.h:44
44				if( buf != 0 ) fprintf(stderr,"buf is nonzero in byteAlign() @%i\n", pos );
SWF::Color::parse (this=this@entry=0x83c7c2c, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:116
116		return r->getError() == SWFR_OK;
113		r->byteAlign();
byteAlign (this=0x83c7a98) at ./SWFReader.h:45
45				buf = bits = 0; }
SWF::Color::parse (this=this@entry=0x83c7c2c, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:116
116		return r->getError() == SWFR_OK;
117	}
SWF::Solid::parse (this=0x83c7c18, r=0x83c7a98, end=-2144329653, 
    ctx=0xbfffe724) at gSWFParser.cpp:4566
4566		return r->getError() == SWFR_OK;
4567	}
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:652
652				fillStyles.append( item );
append (user_data=0x0, data=<optimized out>, this=0x83c7b40) at ./SWFList.h:41
41					if( !mLast ) {
49						return mLast = new ListItem<T>( data, mLast, user_data );
ListItem (user_data=0x0, insertAfter=0x83c7c00, data=<optimized out>, 
    this=0x83c7c40) at ./SWFList.h:125
125					mNext = insertAfter ? insertAfter->replaceNext( this ) : NULL;
123					mData = data;
124					mPrevious = insertAfter;
125					mNext = insertAfter ? insertAfter->replaceNext( this ) : NULL;
replaceNext (this=<optimized out>, next=0x83c7c40) at ./SWFList.h:131
131					ListItem *ret = mNext;
132					mNext = next;
ListItem (user_data=0x0, insertAfter=0x83c7c00, data=<optimized out>, 
    this=0x83c7c40) at ./SWFList.h:126
126					if( mNext ) mNext->mPrevious = this;
125					mNext = insertAfter ? insertAfter->replaceNext( this ) : NULL;
126					if( mNext ) mNext->mPrevious = this;
127					mUserData = user_data;
append (user_data=0x0, data=<optimized out>, this=0x83c7b40) at ./SWFList.h:49
49						return mLast = new ListItem<T>( data, mLast, user_data );
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:650
650			for( int i=0; i<n_fillStyles; i++ ) {
655	n_lineStyles = r->getByte();
SWF::Reader::getByte (this=this@entry=0x83c7a98) at SWFReader.cpp:28
28	uint8_t Reader::getByte() {
29		if( pos+1 > length ) {
34		return data[pos++];
35	}
34		return data[pos++];
35	}
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:656
656	    if( n_lineStyles == 0xff && ctx->tagVersion >= 2 ) {
655	n_lineStyles = r->getByte();
656	    if( n_lineStyles == 0xff && ctx->tagVersion >= 2 ) {
660		if( ctx->debugTrace ) {
678			for( int i=0; i<n_lineStyles; i++ ) {
683	fillBits = r->getNBitInt(4);
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=n@entry=4, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
288			n -= bits;
289			while( n > 8 ) {
288			n -= bits;
289			while( n > 8 ) {
294			buf = getByte();
getByte (this=0x83c7a98) at SWFReader.cpp:29
29		if( pos+1 > length ) {
34		return data[pos++];
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=<optimized out>, 
    n@entry=4, is_signed=is_signed@entry=false) at SWFReader.cpp:296
296			if( n > 0 ) {
294			buf = getByte();
296			if( n > 0 ) {
297				r <<= n;
298				bits = 8-n;
297				r <<= n;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
298				bits = 8-n;
301				buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:684
684		if( ctx->debugTrace ) {
683	fillBits = r->getNBitInt(4);
684		if( ctx->debugTrace ) {
690			ctx->fillBits = fillBits;
691		lineBits = r->getNBitInt(4);
SWF::Reader::getNBitInt (this=this@entry=0x83c7a98, n=n@entry=4, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
284			bits = buf = 0;
285			goto ret;
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::StyleList::parse (this=this@entry=0x83c7b30, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:692
692		if( ctx->debugTrace ) {
691		lineBits = r->getNBitInt(4);
692		if( ctx->debugTrace ) {
698			ctx->lineBits = lineBits;
701		return r->getError() == SWFR_OK;
702	}
SWF::DefineShape::parse (this=0x83c7af8, r=0x83c7a98, end=-2144329653, 
    ctx=0xbfffe724) at gSWFParser.cpp:5060
5060	shapes.parse(r,end,ctx);
SWF::Shape::parse (this=this@entry=0x83c7b64, r=r@entry=0x83c7a98, 
    end=end@entry=-2144329653, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:882
882	bool Shape::parse( Reader *r, int end, Context *ctx ) {
883		file_offset = r->getPosition();
884		if( ctx->debugTrace ) {
905			if( r->getPosition() < myend ) {
924		return r->getError() == SWFR_OK;
925	}
SWF::DefineShape::parse (this=0x83c7af8, r=0x83c7a98, end=-2144329653, 
    ctx=0xbfffe724) at gSWFParser.cpp:5062
5062		r->byteAlign();
byteAlign (this=0x83c7a98) at ./SWFReader.h:44
44				if( buf != 0 ) fprintf(stderr,"buf is nonzero in byteAlign() @%i\n", pos );
45				buf = bits = 0; }
SWF::DefineShape::parse (this=0x83c7af8, r=0x83c7a98, end=-2144329653, 
    ctx=0xbfffe724) at gSWFParser.cpp:5036
5036	bool DefineShape::parse( Reader *r, int end, Context *ctx ) {
5062		r->byteAlign();
byteAlign (this=0x83c7a98) at ./SWFReader.h:45
45				buf = bits = 0; }
SWF::DefineShape::parse (this=0x83c7af8, r=0x83c7a98, end=-2144329653, 
    ctx=0xbfffe724) at gSWFParser.cpp:5064
5064		if( r->getPosition() != file_offset + len ) {
5068					file_offset+len );
fprintf (__fmt=0x8159a50 "WARNING: end of tag %s is @%i, should be @%i\n", 
    __stream=<optimized out>) at /usr/include/i386-linux-gnu/bits/stdio2.h:98
98				__va_arg_pack ());
___fprintf_chk (fp=0xb7be3960 <_IO_2_1_stderr_>, flag=1, 
    format=0x8159a50 "WARNING: end of tag %s is @%i, should be @%i\n")
    at fprintf_chk.c:26
26	fprintf_chk.c: No such file or directory.
Run till exit from #0  ___fprintf_chk (fp=0xb7be3960 <_IO_2_1_stderr_>, 
    flag=1, format=0x8159a50 "WARNING: end of tag %s is @%i, should be @%i\n")
    at fprintf_chk.c:26
SWF::DefineShape::parse (this=0x83c7af8, r=0x83c7a98, end=-2144329653, 
    ctx=0xbfffe724) at gSWFParser.cpp:5069
5069			r->seekTo( file_offset + len );
Value returned is $2 = 63
5073		return r->getError() == SWFR_OK;
5074	}
SWF::Tag::get (r=r@entry=0x83c7a98, end=end@entry=32780, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:32
32		return ret;
33	}
SWF::Header::parse (this=0x83c7ab0, r=0x83c7a98, end=32780, ctx=0xbfffe724)
    at gSWFParser.cpp:421
421				while( item && r->getPosition() <= myend ) {
422					tags.append( item );
append (user_data=0x0, data=0x83c7af8, this=0x83c7ae4) at ./SWFList.h:41
41					if( !mLast ) {
SWF::Header::parse (this=0x83c7ab0, r=0x83c7a98, end=32780, ctx=0xbfffe724)
    at gSWFParser.cpp:422
422					tags.append( item );
append (user_data=0x0, data=0x83c7af8, this=0x83c7ae4) at ./SWFList.h:42
42						if( !mFirst ) {
43							return mFirst = mLast = new ListItem<T>( data, NULL, user_data );
ListItem (user_data=0x0, insertAfter=0x0, data=0x83c7af8, this=0x83c7c58)
    at ./SWFList.h:123
123					mData = data;
124					mPrevious = insertAfter;
125					mNext = insertAfter ? insertAfter->replaceNext( this ) : NULL;
127					mUserData = user_data;
append (user_data=0x0, data=0x83c7af8, this=0x83c7ae4) at ./SWFList.h:43
43							return mFirst = mLast = new ListItem<T>( data, NULL, user_data );
SWF::Header::parse (this=0x83c7ab0, r=0x83c7a98, end=32780, ctx=0xbfffe724)
    at gSWFParser.cpp:423
423					if( r->getPosition() < myend || (r->getPosition()==myend && r->getBits() ))
424						item = Tag::get(r,myend,ctx);
SWF::Tag::get (r=r@entry=0x83c7a98, end=end@entry=32780, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:7
7	Tag *Tag::get( Reader *r, int end, Context *ctx ) {
8		uint16_t h = r->getWord();
SWF::Reader::getWord (this=this@entry=0x83c7a98) at SWFReader.cpp:37
37	uint16_t Reader::getWord() {
38		if( pos+2 > length ) {
44		int r = data[pos++];
45		r += data[pos++]<<8;
44		int r = data[pos++];

Program received signal SIGSEGV, Segmentation fault.
SWF::Reader::getWord (this=this@entry=0x83c7a98) at SWFReader.cpp:44
44		int r = data[pos++];
