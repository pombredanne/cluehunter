Temporary breakpoint 1 at 0x804d480: file swfmill.cpp, line 419.
Starting program: /home/yangke/Program/Fabian-Yamaguchi/evdata/swfmill/swfmill-0.3.3/bin/bin/swfmill swf2xml swfmilllog/exploit_16_0

Temporary breakpoint 1, main (argc=3, argv=0xbfffe894) at swfmill.cpp:419
419	int main( int argc, char *argv[] ) {
422		swft_register();
swft_register () at swft/swft.cpp:259
259	void swft_register() {
261			swft_init, swft_shutdown );
262	}
main (argc=3, argv=0xbfffe894) at swfmill.cpp:423
423		exsltRegisterAll();
429		for( ; i<argc && command==NULL; i++ ) {
425		quiet = true;
429		for( ; i<argc && command==NULL; i++ ) {
428		int i=1;
430			if (strncmp(argv[i], "--version", 10) == 0) {
435			if( argv[i][0] == '-' ) {
429		for( ; i<argc && command==NULL; i++ ) {
480		if( !command ) {
485		if( nonet ) xmlSetExternalEntityLoader( xmlNoNetExternalEntityLoader );
487		if( !quiet ) fprintf( stderr, "%s %s\n", PACKAGE_NAME, PACKAGE_VERSION );
489		if( !strcmp( command, "swf2xml" ) ) {
490			return swfmill_swf2xml( argc-i, &argv[i] );
swfmill_swf2xml (argc=argc@entry=1, argv=argv@entry=0xbfffe89c)
    at swfmill.cpp:81
81	int swfmill_swf2xml( int argc, char *argv[] ) {
87		File input;
81	int swfmill_swf2xml( int argc, char *argv[] ) {
87		File input;
91		Context ctx;
87		File input;
SWF::File::File (this=0xbfffe718) at SWFFile.cpp:10
10	File::File() {
12		compressed = false;
13		version = 7;
14		length = 0;
15		header = NULL;
swfmill_swf2xml (argc=argc@entry=1, argv=argv@entry=0xbfffe89c)
    at swfmill.cpp:91
91		Context ctx;
SWF::Context::Context (this=0xbfffe724) at gSWFBasics.cpp:12
12	Context::Context() : swf_encoding(0) {
29	glyphCount = 0;
12	Context::Context() : swf_encoding(0) {
13		swfVersion = 0;
14		transientPropsToXML = false;
15		debugTrace = false;
16		exportAssets = false;
17		isLast = false;
18		tagVersion = 0;
19		quiet = false;
20		convertEncoding = false;
21		fillBits = 0;
22	lineBits = 0;
23	glyphBits = 0;
24	advanceBits = 0;
27	wideGlyphOffsets = 0;
28	wideMap = 0;
29	glyphCount = 0;
swfmill_swf2xml (argc=argc@entry=1, argv=argv@entry=0xbfffe89c)
    at swfmill.cpp:94
94		if( argc < 1 || argc > 2 ) {
98		infile = argv[0];
99		if( argc>1 ) outfile = argv[1];
98		infile = argv[0];
99		if( argc>1 ) outfile = argv[1];
82		const char *infile = NULL, *outfile = "stdout";
102		std_in = !strncmp( infile, "stdin", 5 );
103		std_out = !strncmp( outfile, "stdout", 6 );
102		std_in = !strncmp( infile, "stdin", 5 );
103		std_out = !strncmp( outfile, "stdout", 6 );
104		in_fp = std_in ? stdin : fopen( infile, "rb" );
105		if( !in_fp ) {
110		if( !quiet ) fprintf(stderr,"Reading from %s\n", infile );
114		if( !std_in ) {
113		filesize = (unsigned int)-1;
114		if( !std_in ) {
115			stat( infile, &filestat );
116		filesize = filestat.st_size;
120		ctx.debugTrace = verbose;
124		if (strcmp(swf_encoding, "UTF-8")) {
120		ctx.debugTrace = verbose;
121		ctx.quiet = quiet;
124		if (strcmp(swf_encoding, "UTF-8")) {
130		if( (size = input.load( in_fp, &ctx, filesize )) != 0 ) {
SWF::File::load (this=this@entry=0xbfffe718, fp=fp@entry=0x83bdd70, 
    _ctx=_ctx@entry=0xbfffe724, filesize=filesize@entry=505) at SWFFile.cpp:34
34	int File::load( FILE *fp, Context *_ctx, unsigned int filesize ) {
36		ctx = _ctx ? _ctx : new Context;
42		if( fread( &sig, 3, 1, fp ) != 1
44			|| (strncmp(sig,"CWS",2) && strncmp(sig,"FWS",2)) ) {
43			|| fread( &version, 1, 1, fp ) != 1 
44			|| (strncmp(sig,"CWS",2) && strncmp(sig,"FWS",2)) ) {
50		length = fgetc(fp);
51		length += fgetc(fp)<<8;
52		length += fgetc(fp)<<16;
53		length += fgetc(fp)<<24;
55		ctx->swfVersion = version;
53		length += fgetc(fp)<<24;
55		ctx->swfVersion = version;
61	    if( length != filesize-8 ) {
53		length += fgetc(fp)<<24;
59		compressed = sig[0]=='C';
57		length -= 8;
61	    if( length != filesize-8 ) {
59		compressed = sig[0]=='C';
62	        if( length > filesize-8 && !compressed ) {
57		length -= 8;
59		compressed = sig[0]=='C';
62	        if( length > filesize-8 && !compressed ) {
70		data = new unsigned char[ length ];
71		if( !data ) {
70		data = new unsigned char[ length ];
71		if( !data ) {
77			decompress( data, length, fp );
76		if( compressed ) {
77			decompress( data, length, fp );
76		if( compressed ) {
77			decompress( data, length, fp );
SWF::File::decompress (this=this@entry=0xbfffe718, 
    outputBuffer=outputBuffer@entry=0x83bded8 "", len=32768, fp=0x83bdd70)
    at SWFFile.cpp:370
370	void File::decompress( unsigned char *outputBuffer, size_t len, FILE *fp ) {
377		stream.next_out = outputBuffer;
383		status = inflateInit( &stream );
370	void File::decompress( unsigned char *outputBuffer, size_t len, FILE *fp ) {
383		status = inflateInit( &stream );
377		stream.next_out = outputBuffer;
381		stream.avail_out = len;
375		stream.avail_in = 0;
376		stream.next_in = inputBuffer;
378		stream.zalloc = (alloc_func) NULL;
379		stream.zfree = (free_func) NULL;
380		stream.opaque = (voidpf) 0;
381		stream.avail_out = len;
383		status = inflateInit( &stream );
384		if( status != Z_OK ) {
390			if( stream.avail_in == 0 ) {
392				stream.avail_in = fread( inputBuffer, 1, MAX_BUFFER, fp );
391				stream.next_in = inputBuffer;
392				stream.avail_in = fread( inputBuffer, 1, MAX_BUFFER, fp );
395			if( stream.avail_in == 0 ) break;
392				stream.avail_in = fread( inputBuffer, 1, MAX_BUFFER, fp );
395			if( stream.avail_in == 0 ) break;
397			status = inflate( &stream, Z_SYNC_FLUSH );
389		do {
400		if( status != Z_STREAM_END && status != Z_OK ) {
401			fprintf( stderr, "Error decompressing SWF: %s\n", stream.msg );
404	}
SWF::File::load (this=this@entry=0xbfffe718, fp=fp@entry=0x83bdd70, 
    _ctx=_ctx@entry=0xbfffe724, filesize=filesize@entry=505) at SWFFile.cpp:85
85		r = new Reader( data, length );
SWF::Reader::Reader (this=0x83c7ab0, d=0x83bded8 "", l=32768)
    at SWFReader.cpp:8
8	Reader::Reader( const unsigned char *d, size_t l ) {
9		data = d;
11		pos = 0;
9		data = d;
10		length = l;
12		buf = bits = 0;
13		err = 0;
10		length = l;
13		err = 0;
SWF::File::load (this=this@entry=0xbfffe718, fp=fp@entry=0x83bdd70, 
    _ctx=_ctx@entry=0xbfffe724, filesize=filesize@entry=505) at SWFFile.cpp:86
86		header = new Header;
SWF::Header::Header (this=0x83c7ac8) at gSWFBasics.cpp:625
625	Header::Header() {
SWF::Item::Item (this=0x83c7ac8) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
SWF::Header::Header (this=0x83c7ac8) at gSWFBasics.cpp:625
625	Header::Header() {
Rectangle (this=<optimized out>) at gSWFBasics.cpp:38
38	Rectangle::Rectangle() {
SWF::Header::Header (this=0x83c7ac8) at gSWFBasics.cpp:625
625	Header::Header() {
Rectangle (this=0x83c7ad4) at gSWFBasics.cpp:38
38	Rectangle::Rectangle() {
SWF::Item::Item (this=0x83c7ad4) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
SWF::Header::Header (this=0x83c7ac8) at gSWFBasics.cpp:627
627	frames = 1;
625	Header::Header() {
Rectangle (this=0x83c7ad4) at gSWFBasics.cpp:38
38	Rectangle::Rectangle() {
39		bits = 0;
40	left = 0;
41	right = 0;
42	top = 0;
43	bottom = 0;
SWF::Header::Header (this=0x83c7ac8) at gSWFBasics.cpp:625
625	Header::Header() {
List (ownership=true, this=0x83c7afc) at ./SWFList.h:19
19					: mOwnership( ownership ) {
20					mFirst = mLast = NULL;
SWF::Header::Header (this=0x83c7ac8) at gSWFBasics.cpp:626
626		framerate = 0;
627	frames = 1;
629	}
SWF::File::load (this=this@entry=0xbfffe718, fp=fp@entry=0x83bdd70, 
    _ctx=_ctx@entry=0xbfffe724, filesize=filesize@entry=505) at SWFFile.cpp:88
88		header->parse( r, length, ctx );
86		header = new Header;
88		header->parse( r, length, ctx );
SWF::Header::parse (this=0x83c7ac8, r=0x83c7ab0, end=32768, ctx=0xbfffe724)
    at gSWFParser.cpp:382
382	bool Header::parse( Reader *r, int end, Context *ctx ) {
383		file_offset = r->getPosition();
384		if( ctx->debugTrace ) {
392		size.parse(r,end,ctx);
SWF::Rectangle::parse (this=this@entry=0x83c7ad4, r=r@entry=0x83c7ab0, 
    end=end@entry=32768, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:12
12	bool Rectangle::parse( Reader *r, int end, Context *ctx ) {
14		if( ctx->debugTrace ) {
13		file_offset = r->getPosition();
14		if( ctx->debugTrace ) {
22		bits = r->getNBitInt(5);
SWF::Reader::getNBitInt (this=this@entry=0x83c7ab0, n=n@entry=5, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
288			n -= bits;
289			while( n > 8 ) {
288			n -= bits;
289			while( n > 8 ) {
294			buf = getByte();
getByte (this=0x83c7ab0) at SWFReader.cpp:29
29		if( pos+1 > length ) {
34		return data[pos++];
SWF::Reader::getNBitInt (this=this@entry=0x83c7ab0, n=<optimized out>, 
    n@entry=5, is_signed=is_signed@entry=false) at SWFReader.cpp:296
296			if( n > 0 ) {
294			buf = getByte();
296			if( n > 0 ) {
297				r <<= n;
298				bits = 8-n;
297				r <<= n;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
298				bits = 8-n;
301				buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7ad4, r=r@entry=0x83c7ab0, 
    end=end@entry=32768, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:23
23		if( ctx->debugTrace ) {
22		bits = r->getNBitInt(5);
23		if( ctx->debugTrace ) {
28		left = r->getNBitInt(bits,true);
SWF::Reader::getNBitInt (this=this@entry=0x83c7ab0, n=0, 
    is_signed=is_signed@entry=true) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
306		r = buf >> (bits-n);
308		buf &= (1<<bits)-1;
306		r = buf >> (bits-n);
307		bits -= n;
308		buf &= (1<<bits)-1;
307		bits -= n;
308		buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
311		long sign = (1<<(orig_n-1));
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7ad4, r=r@entry=0x83c7ab0, 
    end=end@entry=32768, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:29
29		if( ctx->debugTrace ) {
28		left = r->getNBitInt(bits,true);
29		if( ctx->debugTrace ) {
34		right = r->getNBitInt(bits,true);
SWF::Reader::getNBitInt (this=this@entry=0x83c7ab0, n=0, 
    is_signed=is_signed@entry=true) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
306		r = buf >> (bits-n);
308		buf &= (1<<bits)-1;
306		r = buf >> (bits-n);
307		bits -= n;
308		buf &= (1<<bits)-1;
307		bits -= n;
308		buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
311		long sign = (1<<(orig_n-1));
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7ad4, r=r@entry=0x83c7ab0, 
    end=end@entry=32768, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:35
35		if( ctx->debugTrace ) {
34		right = r->getNBitInt(bits,true);
35		if( ctx->debugTrace ) {
40		top = r->getNBitInt(bits,true);
SWF::Reader::getNBitInt (this=this@entry=0x83c7ab0, n=0, 
    is_signed=is_signed@entry=true) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
306		r = buf >> (bits-n);
308		buf &= (1<<bits)-1;
306		r = buf >> (bits-n);
307		bits -= n;
308		buf &= (1<<bits)-1;
307		bits -= n;
308		buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
311		long sign = (1<<(orig_n-1));
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7ad4, r=r@entry=0x83c7ab0, 
    end=end@entry=32768, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:41
41		if( ctx->debugTrace ) {
40		top = r->getNBitInt(bits,true);
41		if( ctx->debugTrace ) {
46		bottom = r->getNBitInt(bits,true);
SWF::Reader::getNBitInt (this=this@entry=0x83c7ab0, n=0, 
    is_signed=is_signed@entry=true) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
306		r = buf >> (bits-n);
308		buf &= (1<<bits)-1;
306		r = buf >> (bits-n);
307		bits -= n;
308		buf &= (1<<bits)-1;
307		bits -= n;
308		buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
311		long sign = (1<<(orig_n-1));
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Rectangle::parse (this=this@entry=0x83c7ad4, r=r@entry=0x83c7ab0, 
    end=end@entry=32768, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:47
47		if( ctx->debugTrace ) {
46		bottom = r->getNBitInt(bits,true);
47		if( ctx->debugTrace ) {
53		r->byteAlign();
byteAlign (this=0x83c7ab0) at ./SWFReader.h:44
44				if( buf != 0 ) fprintf(stderr,"buf is nonzero in byteAlign() @%i\n", pos );
SWF::Rectangle::parse (this=this@entry=0x83c7ad4, r=r@entry=0x83c7ab0, 
    end=end@entry=32768, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:56
56		return r->getError() == SWFR_OK;
53		r->byteAlign();
byteAlign (this=0x83c7ab0) at ./SWFReader.h:45
45				buf = bits = 0; }
SWF::Rectangle::parse (this=this@entry=0x83c7ad4, r=r@entry=0x83c7ab0, 
    end=end@entry=32768, ctx=ctx@entry=0xbfffe724) at gSWFParser.cpp:56
56		return r->getError() == SWFR_OK;
57	}
SWF::Header::parse (this=0x83c7ac8, r=0x83c7ab0, end=32768, ctx=0xbfffe724)
    at gSWFParser.cpp:393
393	framerate = r->getNBitInt(16);
SWF::Reader::getNBitInt (this=this@entry=0x83c7ab0, n=n@entry=16, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:279
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
279	long Reader::getNBitInt( int n, bool is_signed ) {
283		if( n == bits ) {
282		long r = buf;
283		if( n == bits ) {
287		if( n > bits ) {
288			n -= bits;
289			while( n > 8 ) {
288			n -= bits;
289			while( n > 8 ) {
291				r += getByte();
getByte (this=<optimized out>) at SWFReader.cpp:31
31			pos = length+1;
SWF::Reader::getNBitInt (this=this@entry=0x83c7ab0, n=n@entry=16, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:289
289			while( n > 8 ) {
291				r += getByte();
getByte (this=<optimized out>) at SWFReader.cpp:31
31			pos = length+1;
SWF::Reader::getNBitInt (this=this@entry=0x83c7ab0, n=n@entry=16, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:290
290				r <<= 8;
291				r += getByte();
getByte (this=0x83c7ab0) at SWFReader.cpp:29
29		if( pos+1 > length ) {
34		return data[pos++];
SWF::Reader::getNBitInt (this=this@entry=0x83c7ab0, n=n@entry=16, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:292
292				n-=8;
291				r += getByte();
getByte (this=0x83c7ab0) at SWFReader.cpp:34
34		return data[pos++];
SWF::Reader::getNBitInt (this=this@entry=0x83c7ab0, n=n@entry=16, 
    is_signed=is_signed@entry=false) at SWFReader.cpp:291
291				r += getByte();
289			while( n > 8 ) {
294			buf = getByte();
getByte (this=0x83c7ab0) at SWFReader.cpp:29
29		if( pos+1 > length ) {
34		return data[pos++];
SWF::Reader::getNBitInt (this=this@entry=0x83c7ab0, n=<optimized out>, 
    n@entry=16, is_signed=is_signed@entry=false) at SWFReader.cpp:296
296			if( n > 0 ) {
294			buf = getByte();
296			if( n > 0 ) {
297				r <<= n;
298				bits = 8-n;
297				r <<= n;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
300				r += buf >> (8-n);
301				buf &= (1<<bits)-1;
298				bits = 8-n;
301				buf &= (1<<bits)-1;
312		if( is_signed && (r&sign)!=0 ) {
317	}
SWF::Header::parse (this=0x83c7ac8, r=0x83c7ab0, end=32768, ctx=0xbfffe724)
    at gSWFParser.cpp:394
394		if( ctx->debugTrace ) {
393	framerate = r->getNBitInt(16);
394		if( ctx->debugTrace ) {
399		frames = r->getWord();
SWF::Reader::getWord (this=this@entry=0x83c7ab0) at SWFReader.cpp:37
37	uint16_t Reader::getWord() {
38		if( pos+2 > length ) {
44		int r = data[pos++];
45		r += data[pos++]<<8;
44		int r = data[pos++];
45		r += data[pos++]<<8;
47	}
45		r += data[pos++]<<8;
46		return r;
47	}
SWF::Header::parse (this=0x83c7ac8, r=0x83c7ab0, end=32768, ctx=0xbfffe724)
    at gSWFParser.cpp:400
400		if( ctx->debugTrace ) {
399		frames = r->getWord();
400		if( ctx->debugTrace ) {
418			if( r->getPosition() < myend ) {
424						item = Tag::get(r,myend,ctx);
SWF::Tag::get (r=r@entry=0x83c7ab0, end=end@entry=32768, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:7
7	Tag *Tag::get( Reader *r, int end, Context *ctx ) {
8		uint16_t h = r->getWord();
SWF::Reader::getWord (this=this@entry=0x83c7ab0) at SWFReader.cpp:37
37	uint16_t Reader::getWord() {
38		if( pos+2 > length ) {
44		int r = data[pos++];
45		r += data[pos++]<<8;
44		int r = data[pos++];
45		r += data[pos++]<<8;
47	}
45		r += data[pos++]<<8;
46		return r;
47	}
SWF::Tag::get (r=r@entry=0x83c7ab0, end=end@entry=32768, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:10
10		int len = h&0x3F;
9		int type = h>>6;
10		int len = h&0x3F;
9		int type = h>>6;
11		if( len == 0x3F ) { // long size
12			len = r->getInt();
SWF::Reader::getInt (this=this@entry=0x83c7ab0) at SWFReader.cpp:49
49	uint32_t Reader::getInt() {
50		if( pos+4 > length ) {
58		r = data[pos++];
59		r += data[pos++]<<8;
58		r = data[pos++];
59		r += data[pos++]<<8;
60		r += data[pos++]<<16;
59		r += data[pos++]<<8;
60		r += data[pos++]<<16;
61		r += data[pos++]<<24;
64	}
61		r += data[pos++]<<24;
64	}
SWF::Tag::get (r=r@entry=0x83c7ab0, end=end@entry=32768, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:16
16		if( len > 100000000 ) {
12			len = r->getInt();
16		if( len > 100000000 ) {
22		Tag *ret = getByType( type );
getByType (type=<optimized out>) at ./SWFIdItem.h:62
62				for( int i=0; i<nRegistered; i++ ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
63					if( Registry[i].type == type ) {
SWF::Tag::get (r=r@entry=0x83c7ab0, end=end@entry=32768, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:24
24		if( !ret ) {
25			ret = new UnknownTag;
SWF::UnknownTag::UnknownTag (this=0x83c7b10) at gSWFBasics.cpp:5439
5439	UnknownTag::UnknownTag() {
Tag (this=0x83c7b10) at gSWFBasics.cpp:5439
5439	UnknownTag::UnknownTag() {
IdItem (this=0x83c7b10) at ./SWFIdItem.h:12
12			IdItem() { type = 0; len = 0; }
SWF::Item::Item (this=0x83c7b10) at SWFItem.cpp:69
69	Item::Item() {
70		file_offset = -1;
71		cached_size = -1;
SWF::UnknownTag::UnknownTag (this=0x83c7b10) at gSWFBasics.cpp:5439
5439	UnknownTag::UnknownTag() {
5440		data = NULL;
5442	}
SWF::Tag::get (r=r@entry=0x83c7ab0, end=end@entry=32768, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:30
30		ret->parse( r, r->getPosition()+len, ctx );
28		ret->setType( type );
setType (this=0x83c7b10, t=41) at ./SWFIdItem.h:17
17			void setType( int t ) { type = t; }
SWF::Tag::get (r=r@entry=0x83c7ab0, end=end@entry=32768, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:29
29		ret->setLength( len );
setLength (this=0x83c7b10, l=-2139094868) at ./SWFIdItem.h:20
20			void setLength( int l ) { len = l; }
SWF::Tag::get (r=r@entry=0x83c7ab0, end=end@entry=32768, 
    ctx=ctx@entry=0xbfffe724) at SWFTag.cpp:30
30		ret->parse( r, r->getPosition()+len, ctx );
SWF::UnknownTag::parse (this=0x83c7b10, r=0x83c7ab0, end=-2139094857, 
    ctx=0xbfffe724) at gSWFParser.cpp:4951
4951	bool UnknownTag::parse( Reader *r, int end, Context *ctx ) {
4952		file_offset = r->getPosition();
4953		if( ctx->debugTrace ) {
4965			data = new unsigned char[ sz ];

Program received signal SIGABRT, Aborted.
0xb7fdd424 in __kernel_vsyscall ()
